// @(#)root/graf:$Id: SBDetectotconstruction.h 20882 2007-11-19 11:31:26Z rdm $
// Author: Andrea Longhin   16/9/09

/*************************************************************************
 *
 *************************************************************************/

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// SBDetectorconstruction                                               //
//                                                                      //
// Detector construction.                                               //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

#ifndef SBDetectorConstruction_h
#define SBDetectorConstruction_h 1

#include "G4VUserDetectorConstruction.hh"
#include "globals.hh"
#include <Rtypes.h>

class G4Box;
class G4Tubs;
class G4Polycone;
class G4LogicalVolume;
class G4VPhysicalVolume;
class G4Material;
class SBDetectorMessenger;
//class SBFieldSetup;

class SBDetectorConstruction : public G4VUserDetectorConstruction
{
public:
  
  SBDetectorConstruction();
  ~SBDetectorConstruction();
     
private:

  G4String HornFile1;
  G4String HornFile2;

  G4double           OffAxisAngle;
  G4double           OffAxisPhi;
  G4Material*        TargetMaterial;
  G4double           TargetThickness;
  G4double           TargetDiameter;
  G4double           TargetZetaPos;

  G4double           Horn1ZetaStart;
  G4double           Horn2ZetaStart;
  G4double           Horn1ZetaEnd;
  G4double           Horn2ZetaEnd;
     
  G4Material*        defaultMaterial;

  G4Material*        HornMaterial;
  G4Material*        ReflectorMaterial;
  G4Material*        TunnelMaterial;

  G4Material*        FillingMaterial;

  G4double           rO_Hall;
  G4double           L_Hall;

  //Inner conductor
  G4double InCondCurvRad;
  G4double InCondRad[2];
  G4double InCondDepth[3];
  G4double InCondLength[5];
  G4double InCondHalfLength;

  // Outer Conductor (tube)  
  G4double OutCondRad;
  G4double OutCondDepth;
  G4double OutCondLength;

  // Inner Conductor Closing Ring (tube + circular foil)    
  G4double ClosRgDepth; 

  //Inner Condutor End Flange
  G4double EndFlangeDepth; 
  G4double EndFlangeInRad; 
  G4double EndFlangeOutRad;

  // Double Skin (Water surround the horn and the double skin surround the water)
  G4double WaterThickness; 
  G4double SkinThickness;

  //Outer conductor Link Ring and Outer Conductor End flange
  G4double OutCondLnkRgLength[3];
  G4double OutCondLnkRgDepth; 
  G4double OutCondLnkRgRad[2];

  // Reflector
  G4double ReflInForwardRad; 
  G4double ReflOutRad; 
  G4double ReflInLength; 
  G4double ReflThickness;

  // Target
  G4double TargetRadius; 
  G4double TargetLength;

  // Tunnel
  G4double TunnelRadius; 
  G4double TunnelLength;

  G4int HornDesign;
  G4int DoSkin;
  G4int DoRefl;
  G4int InjSchema;
  G4int Horn_N;
  G4double MinHornDisplacRad;
  G4double MB_L1;// = 79.98*cm;
  G4double MB_L2;// = 30.6*cm;
  G4double MB_L3;// = 19.78*cm;
  G4double MB_L4;// = 30.2*cm;
  G4double MB_L5;// = 5.63*cm;
  G4double MB_R;//  = 13.9*cm;//curvature radius
  G4double MB_r;//  = 5.08*cm;//curvature radius  
  G4double MB_R0;// = 1.9*cm;//radial extension
  G4double MB_R1;// = 30*cm;//radial extension
  G4double MB_R2;// = 6.54*cm;//radial alcove

  G4double Horn_I1;//300000A
  G4double Horn_I2;//600000A

  G4double MB2_L1;// = 79.98*cm;
  G4double SkinDepth_MS1;
  G4double SkinDepth_MS2;
  G4int NMS1;
  G4double Z0_MS1;
  G4double zMS1[100],riMS1[100],roMS1[100];
  G4double zMS2[100],riMS2[100],roMS2[100];
  G4int NMS2;
  G4double Z0_MS2;
  G4double zMS1_skin[100],riMS1_skin[100],roMS1_skin[100];
  G4double zMS2_skin[100],riMS2_skin[100],roMS2_skin[100];
  //-----------------------------------             //////////////////////////////////////////////////


//....oooOO0OOooo....  Solids Construction  ....oooOO0OOooo....
  
  //SBDetectorMessenger* detectorMessenger;

  G4VPhysicalVolume* Construct();

  G4Tubs*            solidWorld;
  G4LogicalVolume*   logicWorld;
  G4VPhysicalVolume* physiWorld;

  G4Tubs*            solidTunnel;
  G4LogicalVolume*   logicTunnel;
  G4VPhysicalVolume* physiTunnel;

  G4Polycone* solidInnerConductor;
  G4LogicalVolume* logicInnerConductor;
  G4VPhysicalVolume* physiInnerConductor[4];
  
  G4Polycone* solidVirtualOuterConductor;
  G4SubtractionSolid* solidOuterConductor;
  G4LogicalVolume* logicOuterConductor;
  G4VPhysicalVolume* physiOuterConductor[4];

  G4Polycone* solidBField1;
  G4LogicalVolume* logicBField1[4];
  G4VPhysicalVolume* physiBField1[4];

  G4Polycone* solidVirtualBField2;
  G4SubtractionSolid* solidBField2;
  G4LogicalVolume* logicBField2[4];
  G4VPhysicalVolume* physiBField2[4];
   
  G4Tubs* solidTarget;
  G4LogicalVolume* logicTarget;
  G4VPhysicalVolume* physiTarget[4];

  void DefineMaterials();
  G4VPhysicalVolume* ConstructSystem();    

  void SetVolumesVisibility();
  void DoMagField1(bool);
  void DoMagField2(bool);
  void DoInnerConductor(bool);
  void DoOuterConductor(bool);
    
  void DoTunnel(bool);
  void DoTarget(bool);

public:

  void SetHornParameters();
  
  void SetOffAxisAngle(G4double);
  void SetOffAxisPhi(G4double);
 
  G4double GetOffAxisAngle(){return OffAxisAngle;};
  G4double GetOffAxisPhi(){return OffAxisPhi;};
  
  G4double Horn_xpos;
  G4double Horn_ypos;
  G4double Horn_zpos;

  void UpdateGeometry();  
  void PrintHornParameters(); 
                    
  G4double GetHallSizeX(){return 2.*rO_Hall;}; 
  G4double GetHallSizeY(){return 2.*rO_Hall;};
  G4double GetHallSizeZ(){return L_Hall;};

  G4double GetTunnelLength(){return TunnelLength;};
  G4double GetTunnelRadius(){return TunnelRadius;};

  void SetTunnelLength(G4double val){TunnelLength=val;};
  void SetTunnelRadius(G4double val){TunnelRadius=val;};
  //void SetHornXpos (G4double val){Horn_xpos=val;};
  //void SetHornYpos (G4double val){Horn_ypos=val;};
  //void SetHornZpos (G4double val){Horn_zpos=val;};

  
  G4double GetInnerConductorLength(){return 2.*InCondHalfLength;};
     
  G4double GetTargetThickness(){return TargetThickness;}; 
  G4double GetTargetDiameter(){return TargetDiameter;}; 
  G4Material* GetTargetMaterial(){return TargetMaterial;};
  G4double GetTargetZetaPos(){return TargetZetaPos;};
          
  const G4VPhysicalVolume* GetphysiWorld(){return physiWorld;}           
  const G4VPhysicalVolume* GetTarget(){return physiTarget[0];}
//to make it a ROOT class
  //ClassDef(SBDetectorConstruction,2)//SBDetectorConstruction
};
#endif
   
  
