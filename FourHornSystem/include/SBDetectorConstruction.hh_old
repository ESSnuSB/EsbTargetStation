// @(#)root/graf:$Id: SBDetectotconstruction.h 20882 2007-11-19 11:31:26Z rdm $
// Author: Andrea Longhin   16/9/09

/*************************************************************************
 *
 *************************************************************************/

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// SBDetectorconstruction                                               //
//                                                                      //
// Detector construction.                                               //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

#ifndef SBDetectorConstruction_h
#define SBDetectorConstruction_h 1

#include "G4VUserDetectorConstruction.hh"
#include "globals.hh"
#include <Rtypes.h>

class G4Box;
class G4Tubs;
class G4Polycone;
class G4LogicalVolume;
class G4VPhysicalVolume;
class G4Material;
class SBDetectorMessenger;
//class SBFieldSetup;

class SBDetectorConstruction : public G4VUserDetectorConstruction
{
public:
  
  SBDetectorConstruction();
  ~SBDetectorConstruction();
     
private:

  G4String HornFile1;
  G4String HornFile2;

  G4double           OffAxisAngle;
  G4double           OffAxisPhi;
  G4Material*        TargetMaterial;
  G4double           TargetThickness;
  G4double           TargetDiameter;
  G4double           TargetZetaPos;

  G4double           Horn1ZetaStart;
  G4double           Horn2ZetaStart;
  G4double           Horn1ZetaEnd;
  G4double           Horn2ZetaEnd;
     
  G4Material*        defaultMaterial;

  G4Material*        HornMaterial;
  G4Material*        ReflectorMaterial;
  G4Material*        TunnelMaterial;

  G4Material*        FillingMaterial;

  G4double           rO_Hall;
  G4double           L_Hall;

  //Inner conductor
  G4double InCondCurvRad;
  G4double InCondRad[2];
  G4double InCondDepth[3];
  G4double InCondLength[5];
  G4double InCondHalfLength;

  // Outer Conductor (tube)  
  G4double OutCondRad;
  G4double OutCondDepth;
  G4double OutCondLength;

  // Inner Conductor Closing Ring (tube + circular foil)    
  G4double ClosRgDepth; 

  //Inner Condutor End Flange
  G4double EndFlangeDepth; 
  G4double EndFlangeInRad; 
  G4double EndFlangeOutRad;

  // Double Skin (Water surround the horn and the double skin surround the water)
  G4double WaterThickness; 
  G4double SkinThickness;

  //Outer conductor Link Ring and Outer Conductor End flange
  G4double OutCondLnkRgLength[3];
  G4double OutCondLnkRgDepth; 
  G4double OutCondLnkRgRad[2];

  // Reflector
  G4double ReflInForwardRad; 
  G4double ReflOutRad; 
  G4double ReflInLength; 
  G4double ReflThickness;

  // Target
  G4double TargetRadius; 
  G4double TargetLength;

  // Tunnel
  G4double TunnelRadius; 
  G4double TunnelLength;

  G4int HornDesign;
  G4int DoSkin;
  G4int DoRefl;
  G4int InjSchema;
  G4int Horn_N;
  G4double MinHornDisplacRad;
  G4double MB_L1;// = 79.98*cm;
  G4double MB_L2;// = 30.6*cm;
  G4double MB_L3;// = 19.78*cm;
  G4double MB_L4;// = 30.2*cm;
  G4double MB_L5;// = 5.63*cm;
  G4double MB_R;//  = 13.9*cm;//curvature radius
  G4double MB_r;//  = 5.08*cm;//curvature radius  
  G4double MB_R0;// = 1.9*cm;//radial extension
  G4double MB_R1;// = 30*cm;//radial extension
  G4double MB_R2;// = 6.54*cm;//radial alcove

  G4double Horn_I1;//300000A
  G4double Horn_I2;//600000A

  G4double MB2_L1;// = 79.98*cm;
  G4double MB2_L2;// = 30.6*cm;
  G4double MB2_L3;// = 19.78*cm;
  G4double MB2_L4;// = 30.2*cm;
  G4double MB2_L5;// = 5.63*cm;
  G4double MB2_R;//  = 13.9*cm;//curvature radius
  G4double MB2_r;//  = 5.08*cm;//curvature radius  
  G4double MB2_R0;// = 1.9*cm;//radial extension
  G4double MB2_R1;// = 30*cm;//radial extension
  G4double MB2_R2;// = 6.54*cm;//radial alcove

  G4double MB2_DZ;//manual z shift horn 2
  G4double Target_DZ;//manual z shift target wrt horn 1

  G4double MB1_SkinThickness;
  G4double MB2_SkinThickness;

  G4double theta;
  G4double OutCond_zpos;
  G4double ClosRg_zpos;
  G4double ClosRg_InRad;
  G4double ClosRgFoil_zpos;
  G4double EndFlangeTotalDepth;
  G4double EndFlange_zpos;
  G4double WaterClosingRing_zpos;
  G4double SkinClosingRing_zpos;
  G4double OutCondLnkTotLength;
  G4double OutCondLnk_zpos;
  G4double Refl_zpos;
  G4double ReflClRing_zpos;
  G4double HalfMotherVoluLength;
  G4double Horn_xpos;
  G4double Horn_ypos;
  G4double Horn_zpos;
  G4double Tunnel_zpos;
  G4double MB_totL;
  G4double MB2_totL;
  G4double Clearance;
  G4double HalfHornLength;
  G4double HornRadius;
  G4double InCond_zpos;

  G4double current1;
  G4double current2;

  bool MINIBOONEHORN;
  bool MINOSHORN;
  bool LONGHORN;

  G4int NMB;
  G4int MBcurve1_n;
  G4int MBcurve2_n;
  G4int MBzplanes;

  G4int np;
  G4int numZPlanes;
  G4double zPlane[8];
  G4double rInner[8];
  G4double rOuter[8];

  G4double rInnerB[8];
  G4double rOuterB[8];
  G4double zPlaneB[8];

  G4double rInnerMB[28];//[NMB=28]
  G4double rOuterMB[28];

  G4double zPlaneMB[28];

  G4double dalpha1;
  G4double dalpha2;
  G4int nn0;
  G4int nn1;

  G4double thetaI[28];
  G4double thetaO[28];

  G4double rInnerMB_skin[28];//[NMB=28]
  G4double rOuterMB_skin[28];

  G4double zPlaneMB_skin[28];

  G4double zInnerPlaneMB_skin[28];
  G4double zOuterPlaneMB_skin[28];

  G4double zPl_RE[3];
  G4double rI_RE[3];
  G4double rO_RE[3];

  //-----------------------------------
  // MINOS like
  //-----------------------------------
  G4double SkinDepth_MS1;
  G4double SkinDepth_MS2;
  G4int NMS1;
  G4double Z0_MS1;
  G4double zMS1[100],riMS1[100],roMS1[100];
  G4double zMS2[100],riMS2[100],roMS2[100];
  G4int NMS2;
  G4double Z0_MS2;
  G4double zMS1_skin[100],riMS1_skin[100],roMS1_skin[100];
  G4double zMS2_skin[100],riMS2_skin[100],roMS2_skin[100];
  //-----------------------------------
            
  G4Tubs*            solidWorld;
  G4LogicalVolume*   logicWorld;
  G4VPhysicalVolume* physiWorld;

  G4Tubs*            solidHorn;
  G4LogicalVolume*   logicHorn;
  G4VPhysicalVolume* physiHorn;

  G4Tubs*            solidTunnel;
  G4LogicalVolume*   logicTunnel;
  G4VPhysicalVolume* physiTunnel;

  G4Polycone* solidInnerConductor;
  G4LogicalVolume* logicInnerConductor;
  G4VPhysicalVolume* physiInnerConductor;

  G4Polycone* solidBField1;
  G4LogicalVolume* logicBField1[4];
  G4VPhysicalVolume* physiBField1[4];

  // MINOS like
  G4Polycone* solidBField_MS1;
  G4LogicalVolume* logicBField_MS1[4];
  G4VPhysicalVolume* physiBField_MS1[4];

  G4Polycone* solidBField_MS2;
  G4LogicalVolume* logicBField_MS2[4];
  G4VPhysicalVolume* physiBField_MS2[4];
  //-----

  G4Tubs* solidClosingRing;
  G4LogicalVolume* logicClosingRing;
  G4VPhysicalVolume* physiClosingRing;

  G4Polycone* solidEndFlange;
  G4LogicalVolume* logicEndFlange;
  G4VPhysicalVolume* physiEndFlange;

  G4Tubs* solidOuterConductor;
  G4Polycone* solidOuterConductor_MB;
  G4LogicalVolume* logicOuterConductor;
  G4VPhysicalVolume* physiOuterConductor;

  G4Polycone* solidOutCondLnk;
  G4LogicalVolume* logicOutCondLnk;
  G4VPhysicalVolume* physiOutCondLnk;

  G4Polycone* solidRefl;
  G4LogicalVolume* logicRefl;
  G4VPhysicalVolume* physiRefl;

  G4Polycone* solidBField2;
  G4LogicalVolume* logicBField2[4];
  G4VPhysicalVolume* physiBField2[4];

  G4Tubs* solidTopCylinder;
  G4LogicalVolume* logicTopCylinder;
  G4VPhysicalVolume* physiTopCylinder;

  G4Tubs* solidReflForwardRing;
  G4LogicalVolume* logicReflForwardRing;
  G4VPhysicalVolume* physiReflForwardRing;

  // Al skin for parametric horn
  G4Polycone* solidInnerConductor_MB1;
  G4LogicalVolume* logicInnerConductor_MB1;
  G4VPhysicalVolume* physiInnerConductor_MB1[4];

  G4Polycone* solidInnerConductor_MB2;
  G4LogicalVolume* logicInnerConductor_MB2;
  G4VPhysicalVolume* physiInnerConductor_MB2[4];

  G4Polycone* solidOuterConductor_MB1;
  G4LogicalVolume* logicOuterConductor_MB1;
  G4VPhysicalVolume* physiOuterConductor_MB1[4];

  G4Polycone* solidOuterConductor_MB2;
  G4LogicalVolume* logicOuterConductor_MB2;
  G4VPhysicalVolume* physiOuterConductor_MB2[4];

  // backward endcap
  G4Tubs* solidBECAP1;
  G4LogicalVolume* logicBECAP1;
  G4VPhysicalVolume* physiBECAP1[4];
  //forward endcap
  G4Tubs* solidFECAP1;
  G4LogicalVolume* logicFECAP1;
  G4VPhysicalVolume* physiFECAP1[4];

  // backward endcap
  G4Tubs* solidBECAP2;
  G4LogicalVolume* logicBECAP2;
  G4VPhysicalVolume* physiBECAP2[4];
  //forward endcap
  G4Tubs* solidFECAP2;
  G4LogicalVolume* logicFECAP2;
  G4VPhysicalVolume* physiFECAP2[4];


  // Al skin for MINOS like horn
  G4Polycone* solidInnerConductor_MS1;
  G4LogicalVolume* logicInnerConductor_MS1;
  G4VPhysicalVolume* physiInnerConductor_MS1[4];

  G4Polycone* solidInnerConductor_MS2;
  G4LogicalVolume* logicInnerConductor_MS2;
  G4VPhysicalVolume* physiInnerConductor_MS2[4];

  G4Polycone* solidOuterConductor_MS1;
  G4LogicalVolume* logicOuterConductor_MS1;
  G4VPhysicalVolume* physiOuterConductor_MS1[4];

  G4Polycone* solidOuterConductor_MS2;
  G4LogicalVolume* logicOuterConductor_MS2;
  G4VPhysicalVolume* physiOuterConductor_MS2[4];

  //----------------------------

  G4Tubs* solidTarget;
  G4LogicalVolume* logicTarget;
  G4VPhysicalVolume* physiTarget[4];

  SBDetectorMessenger* detectorMessenger;
          
  void DefineMaterials();
  G4VPhysicalVolume* ConstructSystem();    

  void SetVolumesVisibility();
  void DoInnerConductorEndFlange(bool);
  void DoOutCondLnk(bool);
  void DoMagField1(bool);
  void DoMagField2(bool);
  void DoClosingRing(bool);
  void DoInnerConductor(bool);
  void DoOuterConductor(bool);

  void DoInnerConductor_MB1(bool);
  void DoOuterConductor_MB1(bool);
  void DoInnerConductor_MB2(bool);
  void DoOuterConductor_MB2(bool);


  void ReadHornPar_MS(G4int,G4String);
  void DoMagField_MS1(bool);
  void DoMagField_MS2(bool);
  void DoInnerConductor_MS1(bool);
  void DoOuterConductor_MS1(bool);
  void DoInnerConductor_MS2(bool);
  void DoOuterConductor_MS2(bool);

  void DoReflector(bool);
  void DoReflTopCylinder(bool);
  void DoTunnel(bool);
  void DoTarget(bool);
  void DoReflForwRing(bool);


public:
  void SetOffAxisAngle(G4double);
  void SetOffAxisPhi(G4double);
  void SetTargetMaterial (G4String);
  void SetTargetThickness(G4double);
  void SetTargetDiameter(G4double);
  //void SetLocalMagField(G4double,G4LogicalVolume*);
  G4VPhysicalVolume* Construct();

  void SetHornDesign(G4int);// switch
  void SetHornNumber(G4int);//number of horns

  void SetInj(G4int);//injection schema
  void SetSkin(G4int);//switch on/off conductor
  void SetRefl(G4int);//switch on/off conductor
 
  void SetHornParameters();// set hotn parameters
  void SetHorn_r(G4double);//longit. curvature radius at entrance
  void SetHorn_R(G4double);//longit. curvature radius at exit
  void SetHorn_R0(G4double);//inner bore radius
  void SetHorn_R1(G4double);//outer radius
  void SetHorn_R2(G4double);//inner radius of alcove
  void SetHorn_L1(G4double);//longit length1
  void SetHorn_L2(G4double);//longit length2
  void SetHorn_L3(G4double);//longit length3
  void SetHorn_L4(G4double);//longit length4
  void SetHorn_L5(G4double);//longit length5

  void SetHorn_I1(G4double);//current 1
  void SetHorn_I2(G4double);//current 2

  void SetHorn2_r(G4double);//longit. curvature radius at entrance
  void SetHorn2_R(G4double);//longit. curvature radius at exit
  void SetHorn2_R0(G4double);//inner bore radius
  void SetHorn2_R1(G4double);//outer radius
  void SetHorn2_R2(G4double);//inner radius of alcove
  void SetHorn2_L1(G4double);//longit length1
  void SetHorn2_L2(G4double);//longit length2
  void SetHorn2_L3(G4double);//longit length3
  void SetHorn2_L4(G4double);//longit length4
  void SetHorn2_L5(G4double);//longit length5

  void SetHorn2_DZ(G4double);//longit shift manual
  void SetTarget_DZ(G4double);//longit shift manual

  void SetHornFile1(G4String);
  void SetHornFile2(G4String);

  void SetHornX(G4double);//horn x displacement
  void SetHornY(G4double);//horn y displacement

  G4double GetOffAxisAngle(){return OffAxisAngle;};
  G4double GetOffAxisPhi(){return OffAxisPhi;};

  G4int GetHornDesign(){return HornDesign;}
  G4int GetHornNumber(){return Horn_N;}
  G4int GetInj(){return InjSchema;}
  G4int GetSkin(){return DoSkin;}
  G4int GetRefl(){return DoRefl;}

  G4double GetHorn_r();
  G4double GetHorn_R();
  G4double GetHorn_R0();
  G4double GetHorn_R1();
  G4double GetHorn_R2();
  G4double GetHorn_L1();
  G4double GetHorn_L2();
  G4double GetHorn_L3();
  G4double GetHorn_L4();
  G4double GetHorn_L5();

  G4double GetHorn_I1();
  G4double GetHorn_I2();

  G4double GetHorn2_r();
  G4double GetHorn2_R();
  G4double GetHorn2_R0();
  G4double GetHorn2_R1();
  G4double GetHorn2_R2();
  G4double GetHorn2_L1();
  G4double GetHorn2_L2();
  G4double GetHorn2_L3();
  G4double GetHorn2_L4();
  G4double GetHorn2_L5();

  G4double GetHornX();
  G4double GetHornY();

  G4double GetHorn2_DZ();
  G4double GetTarget_DZ();

  void UpdateGeometry();  
  void PrintHornParameters(); 
                    
  G4double GetHallSizeX(){return 2.*rO_Hall;}; 
  G4double GetHallSizeY(){return 2.*rO_Hall;};
  G4double GetHallSizeZ(){return L_Hall;};

  G4double GetTunnelLength(){return TunnelLength;};
  G4double GetTunnelRadius(){return TunnelRadius;};

  void SetTunnelLength(G4double val){TunnelLength=val;};
  void SetTunnelRadius(G4double val){TunnelRadius=val;};

  void SetMB1_SkinThickness(G4double val){MB1_SkinThickness=val;};
  void SetMB2_SkinThickness(G4double val){MB2_SkinThickness=val;};

  G4double GetInnerConductorLength(){return 2.*InCondHalfLength;};
     
  G4double GetTargetThickness(){return TargetThickness;}; 
  G4double GetTargetDiameter(){return TargetDiameter;}; 
  G4Material* GetTargetMaterial(){return TargetMaterial;};
  G4double GetTargetZetaPos(){return TargetZetaPos;};
          
  const G4VPhysicalVolume* GetphysiWorld(){return physiWorld;}           
  const G4VPhysicalVolume* GetTarget(){return physiTarget[0];}
//to make it a ROOT class
  //ClassDef(SBDetectorConstruction,2)//SBDetectorConstruction
};
#endif
