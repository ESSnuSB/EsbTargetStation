#include "SBRunAction.hh"
#include "SBRunActionMessenger.hh"
#include "SBAnalysisManager.hh"
#include "TH1F.h"
#include "TFile.h"
#include "G4Run.hh"
#include "G4RunManager.hh"
#include "G4UnitsTable.hh"

//SBRunAction::SBRunAction(HistoManager* histo) : histoManager(histo)
SBRunAction::SBRunAction(SBPrimaryGeneratorAction* primGen):primaryGen(primGen)
{
  //create a messenger for this class
  runActMessenger = new SBRunActionMessenger(this);
    
  EnuMAX=1.5;// SPL standard
  ENbins=75;//SPL standard

  //EnuMAX=1.5;// SPL prova
  //ENbins=20;//SPL prova

  //EnuMAX=10.;// PS2
  //ENbins=50;//PS2
  //EnuMAX=50.;// CNGS
  //ENbins=50;// CNGS

  //EnuMAX=50.;// NOVA
  //ENbins=1000;// NOVA

  rMAX=250;

  xMAX=2.5;
  yMAX=2.5;

  zMIN=-30.;//tunnel make this depend on tunnel parameters!!
  zMAX=30.;//tunnel

  NENB=9;
  for(int j=0;j<NENB;j++){
    ENULIMS[j]=0.8*((double)j/(double)NENB);
  }
  ENULIMS[NENB]=0.8;

 SBAnalysisManager* analysis = SBAnalysisManager::getInstance();
 analysis->BeginOfRun();

}

SBRunAction::~SBRunAction()
{
  G4cout<<"CALL SBRunAction::~SBRunAction "<<G4endl;
  //delete histoManager;
}

void SBRunAction::BeginOfRunAction(const G4Run* aRun)
{ 
  G4cout << "### Run " << aRun->GetRunID() << " start." << G4endl;

  G4cout<<"CALL SBRunAction::BeginOfRunAction "<<G4endl;

  G4cout<<"CALL SBRunAction::BeginOfRunAction "<<G4endl;
  G4cout<<"CALL SBRunAction::BeginOfRunAction Nbins = "<<ENbins<<G4endl;
  G4cout<<"CALL SBRunAction::BeginOfRunAction EnuMIN = "<<EnuMIN/GeV<<" (GeV)"<<G4endl;
  G4cout<<"CALL SBRunAction::BeginOfRunAction EnuMAX = "<<EnuMAX/GeV<<" (GeV)"<<G4endl;

  //inform the runManager to save random number seed
  G4RunManager::GetRunManager()->SetRandomNumberStore(true);
    
  //initialize cumulative quantities
  //
  sumETarg = sum2ETarg =sumEGap = sum2EGap = 0.;
  sumLTarg = sum2LTarg =sumLGap = sum2LGap = 0.; 

  NDIF_piplus_TOT = 0;
  NDIF_piminus_TOT = 0;
  NDIF_Kplus_TOT = 0;
  NDIF_Kminus_TOT = 0;
  NDIF_KzeroL_TOT = 0;
  NDIF_KzeroS_TOT = 0;

  //G4cout << "ciao"<<G4endl;
  //bool inithisto = false;
  //inithisto = m_hh->init();

  //fROOT = new TFile("SB_simul_v0.root","recreate");

  if(primaryGen->GetJOBID()>=0){
    fROOT = new TFile(Form("output_%06d.root",primaryGen->GetJOBID()),"recreate");
  }else{
    fROOT = new TFile(Form("output_-%06d.root",-primaryGen->GetJOBID()),"recreate");    
  }

  h_ETarg = new TH1F("h_ETarg","h_ETarg",100,0.,2000.);
  h_LTarg = new TH1F("h_LTarg","h_LTarg",100,0.,50.);

  h_p_muplus_PI = new TH1F("h_p_muplus_PI","h_p_muplus_PI",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  h_p_muminus_PI = new TH1F("h_p_muminus_PI","h_p_muminus_PI",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  h_p_muplus_K = new TH1F("h_p_muplus_K","h_p_muplus_K",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  h_p_muminus_K = new TH1F("h_p_muminus_K","h_p_muminus_K",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  // neutrino fluxes

  // unweighted
  pions_numu_du_pi_NW = new TH1F("pions_numu_du_pi_NW","pions_numu_du_pi_NW",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  pions_anumu_du_pi_NW = new TH1F("pions_anumu_du_pi_NW","pions_anumu_du_pi_NW",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_numu_du_ka_NW = new TH1F("kaons_numu_du_ka_NW","kaons_numu_du_ka_NW",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_anumu_du_ka_NW = new TH1F("kaons_anumu_du_ka_NW","kaons_anumu_du_ka_NW",ENbins,EnuMIN/GeV,EnuMAX/GeV);


  // weighted
  pions_numu_du_pi_IDEAL = new TH1F("pions_numu_du_pi_IDEAL","pions_numu_du_pi_IDEAL",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  pions_numu_du_pi = new TH1F("pions_numu_du_pi","pions_numu_du_pi",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  pions_anumu_du_pi = new TH1F("pions_anumu_du_pi","pions_anumu_du_pi",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  pions_numu_du_pi_CLONE = new TH1F("pions_numu_du_pi_CLONE","pions_numu_du_pi_CLONE",NENB,EnuMIN/GeV,0.8);
  pions_anumu_du_pi_CLONE = new TH1F("pions_anumu_du_pi_CLONE","pions_anumu_du_pi_CLONE",NENB,EnuMIN/GeV,0.8);

  pions_numu_du_mu = new TH1F("pions_numu_du_mu","pions_numu_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  pions_anumu_du_mu = new TH1F("pions_anumu_du_mu","pions_anumu_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  pions_nue_du_mu = new TH1F("pions_nue_du_mu","pions_nue_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  pions_anue_du_mu = new TH1F("pions_anue_du_mu","pions_anue_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  kaons_numu_du_ka = new TH1F("kaons_numu_du_ka","kaons_numu_du_ka",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_anumu_du_ka = new TH1F("kaons_anumu_du_ka","kaons_anumu_du_ka",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  kaons_numu_du_pi = new TH1F("kaons_numu_du_pi","kaons_numu_du_pi",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_anumu_du_pi = new TH1F("kaons_anumu_du_pi","kaons_anumu_du_pi",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  
  kaons_nue_du_mu = new TH1F("kaons_nue_du_mu","kaons_nue_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_anumu_du_mu = new TH1F("kaons_anumu_du_mu","kaons_anumu_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_anue_du_mu = new TH1F("kaons_anue_du_mu","kaons_anue_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_numu_du_mu = new TH1F("kaons_numu_du_mu","kaons_numu_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  
  kaons_numu_du_3 = new TH1F("kaons_numu_du_3","kaons_numu_du_3",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_anumu_du_3 = new TH1F("kaons_anumu_du_3","kaons_anumu_du_3",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_nue_du_3 = new TH1F("kaons_nue_du_3","kaons_nue_du_3",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kaons_anue_du_3 = new TH1F("kaons_anue_du_3","kaons_anue_du_3",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  
  kzeros_numu_du_pi = new TH1F("kzeros_numu_du_pi","kzeros_numu_du_pi",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kzeros_anumu_du_pi = new TH1F("kzeros_anumu_du_pi","kzeros_anumu_du_pi",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  
  kzeros_nue_du_mu = new TH1F("kzeros_nue_du_mu","kzeros_nue_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kzeros_anumu_du_mu = new TH1F("kzeros_anumu_du_mu","kzeros_anumu_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kzeros_anue_du_mu = new TH1F("kzeros_anue_du_mu","kzeros_anue_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kzeros_numu_du_mu = new TH1F("kzeros_numu_du_mu","kzeros_numu_du_mu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  
  kzeros_numu_du_3 = new TH1F("kzeros_numu_du_3","kzeros_numu_du_3",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kzeros_anumu_du_3 = new TH1F("kzeros_anumu_du_3","kzeros_anumu_du_3",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kzeros_nue_du_3 = new TH1F("kzeros_nue_du_3","kzeros_nue_du_3",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  kzeros_anue_du_3 = new TH1F("kzeros_anue_du_3","kzeros_anue_du_3",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  // sum
  h_numu = new TH1F("h_numu","h_numu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  h_anumu = new TH1F("h_anumu","h_anumu",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  h_nue = new TH1F("h_nue","h_nue",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  h_anue = new TH1F("h_anue","h_anue",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  // geometrical distribution of decay in flight of pions and kaons

  h_piminus_DIF_r = new TH1F("h_piminus_DIF_r","h_piminus_DIF_r",208,0.,rMAX);
  h_piminus_DIF_z = new TH1F("h_piminus_DIF_z","h_piminus_DIF_z",500,zMIN,zMAX);
  h_piminus_DIF_xy = new TH2F("h_piminus_DIF_xy","h_piminus_DIF_xy",100,-xMAX,xMAX,100,-yMAX,yMAX);
  h_piminus_DIF_zr = new TH2F("h_piminus_DIF_zr","h_piminus_DIF_zr",100,zMIN,zMAX,208,0.,rMAX);
  h_piminus_DIF_thp = new TH2F("h_piminus_DIF_thp","h_piminus_DIF_thp",100,0,1,100,0,1.5);
  h_piminus_DIF_thp_EnuW = new TH2F("h_piminus_DIF_thp_EnuW","h_piminus_DIF_thp_EnuW",100,0,1,100,0,1.5);
  h_piminus_DIF_thpinu = new TH2F("h_piminus_DIF_thpinu","h_piminus_DIF_thpinu",100,0,3.141592,100,0,3.141592);
  h_piminus_DIF_Ethnu = new TH2F("h_piminus_DIF_Ethnu","h_piminus_DIF_Ethnu",100,0,3.141592,100,0,1);
  h_piminus_DIF_EnuForw = new TH1F("h_piminus_DIF_EnuForw","h_piminus_DIF_EnuForw",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  h_Kminus_DIF_r =  new TH1F("h_Kminus_DIF_r","h_Kminus_DIF_r",208,0.,rMAX);
  h_Kminus_DIF_z =  new TH1F("h_Kminus_DIF_z","h_Kminus_DIF_z",500,zMIN,zMAX);
  h_Kminus_DIF_xy =  new TH2F("h_Kminus_DIF_xy","h_Kminus_DIF_xy",100,-xMAX,xMAX,100,-yMAX,yMAX);
  h_Kminus_DIF_zr =  new TH2F("h_Kminus_DIF_zr","h_Kminus_DIF_zr",100,zMIN,zMAX,208,0.,rMAX);
  h_Kminus_DIF_thp =  new TH2F("h_Kminus_DIF_thp","h_Kminus_DIF_thp",100,0,1,100,0,1.5);
  h_Kminus_DIF_thp_EnuW =  new TH2F("h_Kminus_DIF_thp_EnuW","h_Kminus_DIF_thp_EnuW",100,0,1,100,0,1.5);
  h_Kminus_DIF_thpinu =  new TH2F("h_Kminus_DIF_thpinu","h_Kminus_DIF_thpinu",100,0,3.141592,100,0,3.141592);
  h_Kminus_DIF_Ethnu =  new TH2F("h_Kminus_DIF_Ethnu","h_Kminus_DIF_Ethnu",100,0,3.141592,100,0,1);
  h_Kminus_DIF_EnuForw = new TH1F("h_Kminus_DIF_EnuForw","h_Kminus_DIF_EnuForw",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  h_piplus_DIF_r =  new TH1F("h_piplus_DIF_r","h_piplus_DIF_r",208,0.,rMAX);
  h_piplus_DIF_z =  new TH1F("h_piplus_DIF_z","h_piplus_DIF_z",500,zMIN,zMAX);
  h_piplus_DIF_xy =  new TH2F("h_piplus_DIF_xy","h_piplus_DIF_xy",100,-xMAX,xMAX,100,-yMAX,yMAX);
  h_piplus_DIF_zr =  new TH2F("h_piplus_DIF_zr","h_piplus_DIF_zr",100,zMIN,zMAX,208,0.,rMAX);
  h_piplus_DIF_thp =  new TH2F("h_piplus_DIF_thp","h_piplus_DIF_thp",100,0,1,100,0,1.5);
  h_piplus_DIF_thp_EnuW =  new TH2F("h_piplus_DIF_thp_EnuW","h_piplus_DIF_thp_EnuW",100,0,1,100,0,1.5);
  h_piplus_DIF_thpinu =  new TH2F("h_piplus_DIF_thpinu","h_piplus_DIF_thpinu",100,0,3.141592,100,0,3.141592);
  h_piplus_DIF_Ethnu =  new TH2F("h_piplus_DIF_Ethnu","h_piplus_DIF_Ethnu",100,0,3.141592,100,0,1);
  h_piplus_DIF_EnuForw = new TH1F("h_piplus_DIF_EnuForw","h_piplus_DIF_EnuForw",ENbins,EnuMIN/GeV,EnuMAX/GeV);

  h_Kplus_DIF_r =  new TH1F("h_Kplus_DIF_r","h_Kplus_DIF_r",208,0.,rMAX);
  h_Kplus_DIF_z =  new TH1F("h_Kplus_DIF_z","h_Kplus_DIF_z",500,zMIN,zMAX);
  h_Kplus_DIF_xy =  new TH2F("h_Kplus_DIF_xy","h_Kplus_DIF_xy",100,-xMAX,xMAX,100,-yMAX,yMAX);
  h_Kplus_DIF_zr =  new TH2F("h_Kplus_DIF_zr","h_Kplus_DIF_zr",100,zMIN,zMAX,208,0.,rMAX);
  h_Kplus_DIF_thp =  new TH2F("h_Kplus_DIF_thp","h_Kplus_DIF_thp",100,0,1,100,0,1.5);
  h_Kplus_DIF_thp_EnuW =  new TH2F("h_Kplus_DIF_thp_EnuW","h_Kplus_DIF_thp_EnuW",100,0,1,100,0,1.5);
  h_Kplus_DIF_thpinu =  new TH2F("h_Kplus_DIF_thpinu","h_Kplus_DIF_thpinu",100,0,3.141592,100,0,3.141592);
  h_Kplus_DIF_Ethnu =  new TH2F("h_Kplus_DIF_Ethnu","h_Kplus_DIF_Ethnu",100,0,3.141592,100,0,1);
  h_Kplus_DIF_EnuForw = new TH1F("h_Kplus_DIF_EnuForw","h_Kplus_DIF_EnuForw",ENbins,EnuMIN/GeV,EnuMAX/GeV);
  //

  G4double pmax = 1.5;

  h_pt_exit_piplus = new TH1F("h_pt_exit_piplus","h_pt_exit_piplus",100,0,1.);
  h_p_exit_piplus = new TH1F("h_p_exit_piplus","h_p_exit_piplus",100,0,pmax);
  //h_p_exit_piplus_W = new TH1F("h_p_exit_piplus_W","h_p_exit_piplus_W",100,0,pmax);
  h_xy_exit_piplus = new TH2F("h_xy_exit_piplus","h_xy_exit_piplus",100,-100,100,100,-100,100);
  h_z_exit_piplus = new TH1F("h_z_exit_piplus","h_z_exit_piplus",500,zMIN,zMAX);
  h_r_exit_piplus = new TH1F("h_r_exit_piplus","h_r_exit_piplus",208,0,rMAX);
  h_pVSr_exit_piplus = new TH2F("h_pVSr_exit_piplus","h_pVSr_exit_piplus",208,0,rMAX,100,0,1);
  h_thetaVSr_exit_piplus = new TH2F("h_thetaVSr_exit_piplus","h_thetaVSr_exit_piplus",208,0,rMAX,100,0,1);
  h_theta_exit_piplus = new TH1F("h_theta_exit_piplus","h_theta_exit_piplus",100,0,1.);
  //h_theta_exit_piplus_W = new TH1F("h_theta_exit_piplus_W","h_theta_exit_piplus_W",100,0,1.);
  h_pVStheta_exit_piplus = new TH2F("h_pVStheta_exit_piplus","h_pVStheta_exit_piplus",100,0.,1.,100,0,pmax);
  //h_pVStheta_exit_piplus_W = new TH2F("h_pVStheta_exit_piplus_W","h_pVStheta_exit_piplus_W",100,0.,1.,100,0,pmax);
  
  h_pt_exit_piminus = new TH1F("h_pt_exit_piminus","h_pt_exit_piminus",100,0,1.);
  h_p_exit_piminus = new TH1F("h_p_exit_piminus","h_p_exit_piminus",100,0,pmax);
  //h_p_exit_piminus_W = new TH1F("h_p_exit_piminus_W","h_p_exit_piminus_W",100,0,pmax);
  h_xy_exit_piminus = new TH2F("h_xy_exit_piminus","h_xy_exit_piminus",100,-100,100,100,-100,100);
  h_z_exit_piminus = new TH1F("h_z_exit_piminus","h_z_exit_piminus",500,zMIN,zMAX);
  h_r_exit_piminus = new TH1F("h_r_exit_piminus","h_r_exit_piminus",208,0,rMAX);
  h_pVSr_exit_piminus = new TH2F("h_pVSr_exit_piminus","h_pVSr_exit_piminus",208,0,rMAX,100,0,1);
  h_thetaVSr_exit_piminus = new TH2F("h_thetaVSr_exit_piminus","h_thetaVSr_exit_piminus",208,0,rMAX,100,0,1);
  h_theta_exit_piminus = new TH1F("h_theta_exit_piminus","h_theta_exit_piminus",100,0,1.);
  //h_theta_exit_piminus_W = new TH1F("h_theta_exit_piminus_W","h_theta_exit_piminus_W",100,0,1.);
  h_pVStheta_exit_piminus = new TH2F("h_pVStheta_exit_piminus","h_pVStheta_exit_piminus",100,0.,1.,100,0,pmax);
  //h_pVStheta_exit_piminus_W = new TH2F("h_pVStheta_exit_piminus_W","h_pVStheta_exit_piminus_W",100,0.,1.,100,0,pmax);
  
  h_pt_exit_kplus = new TH1F("h_pt_exit_kplus","h_pt_exit_kplus",100,0,1.);
  h_p_exit_kplus = new TH1F("h_p_exit_kplus","h_p_exit_kplus",100,0,pmax);
  //h_p_exit_kplus_W = new TH1F("h_p_exit_kplus_W","h_p_exit_kplus_W",100,0,pmax);
  h_xy_exit_kplus = new TH2F("h_xy_exit_kplus","h_xy_exit_kplus",100,-100,100,100,-100,100);
  h_z_exit_kplus = new TH1F("h_z_exit_kplus","h_z_exit_kplus",500,zMIN,zMAX);
  h_r_exit_kplus = new TH1F("h_r_exit_kplus","h_r_exit_kplus",208,0,rMAX);
  h_pVSr_exit_kplus = new TH2F("h_pVSr_exit_kplus","h_pVSr_exit_kplus",208,0,rMAX,100,0,1);
  h_thetaVSr_exit_kplus = new TH2F("h_thetaVSr_exit_kplus","h_thetaVSr_exit_kplus",208,0,rMAX,100,0,1);
  h_theta_exit_kplus = new TH1F("h_theta_exit_kplus","h_theta_exit_kplus",100,0,1.);
  //h_theta_exit_kplus_W = new TH1F("h_theta_exit_kplus_W","h_theta_exit_kplus_W",100,0,1.);
  h_pVStheta_exit_kplus = new TH2F("h_pVStheta_exit_kplus","h_pVStheta_exit_kplus",100,0.,1.,100,0,pmax);
  
  h_pt_exit_kminus = new TH1F("h_pt_exit_kminus","h_pt_exit_kminus",100,0,1.);
  h_p_exit_kminus = new TH1F("h_p_exit_kminus","h_p_exit_kminus",100,0,pmax);
  //h_p_exit_kminus_W = new TH1F("h_p_exit_kminus_W","h_p_exit_kminus_W",100,0,pmax);
  h_xy_exit_kminus = new TH2F("h_xy_exit_kminus","h_xy_exit_kminus",100,-100,100,100,-100,100);
  h_z_exit_kminus = new TH1F("h_z_exit_kminus","h_z_exit_kminus",500,zMIN,zMAX);
  h_r_exit_kminus = new TH1F("h_r_exit_kminus","h_r_exit_kminus",208,0,rMAX);
  h_pVSr_exit_kminus = new TH2F("h_pVSr_exit_kminus","h_pVSr_exit_kminus",208,0,rMAX,100,0,1);
  h_thetaVSr_exit_kminus = new TH2F("h_thetaVSr_exit_kminus","h_thetaVSr_exit_kminus",208,0,rMAX,100,0,1);
  h_theta_exit_kminus = new TH1F("h_theta_exit_kminus","h_theta_exit_kminus",100,0,1.);
  //h_theta_exit_kminus_W = new TH1F("h_theta_exit_kminus_W","h_theta_exit_kminus_W",100,0,1.);
  h_pVStheta_exit_kminus = new TH2F("h_pVStheta_exit_kminus","h_pVStheta_exit_kminus",100,0.,1.,100,0,pmax);
  
  h_pt_exit_muplus = new TH1F("h_pt_exit_muplus","h_pt_exit_muplus",100,0,1.);
  h_p_exit_muplus = new TH1F("h_p_exit_muplus","h_p_exit_muplus",100,0,pmax);
  //h_p_exit_muplus_W = new TH1F("h_p_exit_muplus_W","h_p_exit_muplus_W",100,0,pmax);
  h_xy_exit_muplus = new TH2F("h_xy_exit_muplus","h_xy_exit_muplus",100,-100,100,100,-100,100);
  h_z_exit_muplus = new TH1F("h_z_exit_muplus","h_z_exit_muplus",500,zMIN,zMAX);
  h_r_exit_muplus = new TH1F("h_r_exit_muplus","h_r_exit_muplus",208,0,rMAX);
  h_pVSr_exit_muplus = new TH2F("h_pVSr_exit_muplus","h_pVSr_exit_muplus",208,0,rMAX,100,0,1);
  h_thetaVSr_exit_muplus = new TH2F("h_thetaVSr_exit_muplus","h_thetaVSr_exit_muplus",208,0,rMAX,100,0,1);
  h_theta_exit_muplus = new TH1F("h_theta_exit_muplus","h_theta_exit_muplus",100,0,1.);
  //h_theta_exit_muplus_W = new TH1F("h_theta_exit_muplus_W","h_theta_exit_muplus_W",100,0,1.);
  h_pVStheta_exit_muplus = new TH2F("h_pVStheta_exit_muplus","h_pVStheta_exit_muplus",100,0.,1.,100,0,pmax);
  
  h_pt_exit_muminus = new TH1F("h_pt_exit_muminus","h_pt_exit_muminus",100,0,1.);
  h_p_exit_muminus = new TH1F("h_p_exit_muminus","h_p_exit_muminus",100,0,pmax);
  //h_p_exit_muminus_W = new TH1F("h_p_exit_muminus_W","h_p_exit_muminus_W",100,0,pmax);
  h_xy_exit_muminus = new TH2F("h_xy_exit_muminus","h_xy_exit_muminus",100,-100,100,100,-100,100);
  h_z_exit_muminus = new TH1F("h_z_exit_muminus","h_z_exit_muminus",500,zMIN,zMAX);
  h_r_exit_muminus = new TH1F("h_r_exit_muminus","h_r_exit_muminus",208,0,rMAX);
  h_pVSr_exit_muminus = new TH2F("h_pVSr_exit_muminus","h_pVSr_exit_muminus",208,0,rMAX,100,0,1);
  h_thetaVSr_exit_muminus = new TH2F("h_thetaVSr_exit_muminus","h_thetaVSr_exit_muminus",208,0,rMAX,100,0,1);
  h_theta_exit_muminus = new TH1F("h_theta_exit_muminus","h_theta_exit_muminus",100,0,1.);
  //h_theta_exit_muminus_W = new TH1F("h_theta_exit_muminus_W","h_theta_exit_muminus_W",100,0,1.);
  h_pVStheta_exit_muminus = new TH2F("h_pVStheta_exit_muminus","h_pVStheta_exit_muminus",100,0.,1.,100,0,pmax);
  
  h_pt_exit_k0L = new TH1F("h_pt_exit_k0L","h_pt_exit_k0L",100,0,1.);
  h_p_exit_k0L = new TH1F("h_p_exit_k0L","h_p_exit_k0L",100,0,pmax);
  //h_p_exit_k0L_W = new TH1F("h_p_exit_k0L_W","h_p_exit_k0L_W",100,0,pmax);
  h_xy_exit_k0L = new TH2F("h_xy_exit_k0L","h_xy_exit_k0L",100,-100,100,100,-100,100);
  h_z_exit_k0L = new TH1F("h_z_exit_k0L","h_z_exit_k0L",500,zMIN,zMAX);
  h_r_exit_k0L = new TH1F("h_r_exit_k0L","h_r_exit_k0L",208,0,rMAX);
  h_pVSr_exit_k0L = new TH2F("h_pVSr_exit_k0L","h_pVSr_exit_k0L",208,0,rMAX,100,0,1);
  h_thetaVSr_exit_k0L = new TH2F("h_thetaVSr_exit_k0L","h_thetaVSr_exit_k0L",208,0,rMAX,100,0,1);
  h_theta_exit_k0L = new TH1F("h_theta_exit_k0L","h_theta_exit_k0L",100,0,1.);
  //h_theta_exit_k0L_W = new TH1F("h_theta_exit_k0L_W","h_theta_exit_k0L_W",100,0,1.);
  h_pVStheta_exit_k0L = new TH2F("h_pVStheta_exit_k0L","h_pVStheta_exit_k0L",100,0.,1.,100,0,pmax);

  // at target level

  h_pt_targ_piplus = new TH1F("h_pt_targ_piplus","h_pt_targ_piplus",100,0,1.);
  h_p_targ_piplus = new TH1F("h_p_targ_piplus","h_p_targ_piplus",100,0,pmax);
  h_z_targ_piplus = new TH1F("h_z_targ_piplus","h_z_targ_piplus",100,0,90);
  h_zabs_targ_piplus = new TH1F("h_zabs_targ_piplus","h_zabs_targ_piplus",500,zMIN,zMAX);
  h_theta_targ_piplus = new TH1F("h_theta_targ_piplus","h_theta_targ_piplus",100,0,1.);
  h_pVStheta_targ_piplus = new TH2F("h_pVStheta_targ_piplus","h_pVStheta_targ_piplus",100,0.,1.,100,0,pmax);

  for(int i=0;i<NENB;i++){
    h_pVStheta_targ_piplus_Enubins[i] = new TH2F(Form("h_pVStheta_targ_piplus_Enubins%d",i),
						 Form("h_pVStheta_targ_piplus_Enubins%d",i),100,0.,1.,100,0,3.);
    h_p_targ_piplus_Enubins[i] = new TH1F(Form("h_p_targ_piplus_Enubins%d",i),
					  Form("h_p_targ_piplus_Enubins%d",i),100,0,3.);
    h_theta_targ_piplus_Enubins[i] = new TH1F(Form("h_theta_targ_piplus_Enubins%d",i),
					       Form("h_theta_targ_piplus_Enubins%d",i),100,0,1.);
  }

  h_pt_targ_piminus = new TH1F("h_pt_targ_piminus","h_pt_targ_piminus",100,0,1.);
  h_p_targ_piminus = new TH1F("h_p_targ_piminus","h_p_targ_piminus",100,0,pmax);
  h_z_targ_piminus = new TH1F("h_z_targ_piminus","h_z_targ_piminus",100,0,90);
  h_zabs_targ_piminus = new TH1F("h_zabs_targ_piminus","h_zabs_targ_piminus",500,zMIN,zMAX);
  h_theta_targ_piminus = new TH1F("h_theta_targ_piminus","h_theta_targ_piminus",100,0,1.);
  h_pVStheta_targ_piminus = new TH2F("h_pVStheta_targ_piminus","h_pVStheta_targ_piminus",100,0.,1.,100,0,pmax);
  for(int i=0;i<NENB;i++){
    h_pVStheta_targ_piminus_Enubins[i] = new TH2F(Form("h_pVStheta_targ_piminus_Enubins%d",i),
						  Form("h_pVStheta_targ_piminus_Enubins%d",i),100,0.,1.,100,0,3.);
    h_p_targ_piminus_Enubins[i] = new TH1F(Form("h_p_targ_piminus_Enubins%d",i),
					   Form("h_p_targ_piminus_Enubins%d",i),100,0,3.);
    h_theta_targ_piminus_Enubins[i] = new TH1F(Form("h_theta_targ_piminus_Enubins%d",i),
					       Form("h_theta_targ_piminus_Enubins%d",i),100,0,1.);
  }
  // muon decay

  h_MUDEC_Enumustar = new TH1F("h_MUDEC_Enumustar","h_MUDEC_Enumustar",100,0.,55.);//MeV
  h_MUDEC_Enuestar = new TH1F("h_MUDEC_Enuestar","h_MUDEC_Enuestar",100,0.,55.);//MeV
  h_MUDEC_Eanumustar = new TH1F("h_MUDEC_Eanumustar","h_MUDEC_Eanumustar",100,0.,55.);//MeV
  h_MUDEC_Eanuestar = new TH1F("h_MUDEC_Eanuestar","h_MUDEC_Eanuestar",100,0.,55.);//MeV

  h_MUDEC_cthstarMu = new TH1F("h_MUDEC_cthstarMu","h_MUDEC_cthstarMu",100,-1.,1.);
  h_MUDEC_cthstarNu = new TH1F("h_MUDEC_cthstarNu","h_MUDEC_cthstarNu",100,-1.,1.);

  h_MUDEC_probaTunnel = new TH1F("h_MUDEC_probaTunnel","h_MUDEC_probaTunnel",100,0,0.05);
  h_MUDEC_pathTunnel = new TH1F("h_MUDEC_pathTunnel","h_MUDEC_pathTunnel",100,0,50);

  h_MUDEC_probaTunnel_pmu = new TH2F("h_MUDEC_probaTunnel_pmu","h_MUDEC_probaTunnel_pmu",100,0,3,100,0,0.05);
  h_MUDEC_probaTunnel_thmu = new TH2F("h_MUDEC_probaTunnel_thmu","h_MUDEC_probaTunnel_thmu",100,0,2,100,0,0.05);
  h_MUDEC_probaTunnel_rmu = new TH2F("h_MUDEC_probaTunnel_rmu","h_MUDEC_probaTunnel_rmu",100,0,2.5,100,0,0.05);

  h_MUDEC_muxy = new TH2F("h_MUDEC_muxy","h_MUDEC_muxy",100,-3.,3.,100,-3.,3.);//m
  h_MUDEC_muzr = new TH2F("h_MUDEC_muzr","h_MUDEC_muzr",100,zMIN,zMAX,100,0.,3.);//m

  h_MUDEC_polaL_muplus = new TH1F("h_MUDEC_polaL_muplus","h_MUDEC_polaL_muplus",100,-1.,1.);
  h_MUDEC_polaL_muminus = new TH1F("h_MUDEC_polaL_muminus","h_MUDEC_polaL_muminus",100,-1.,1.);
  h_MUDEC_thpimu_lab = new TH1F("h_MUDEC_thpimu_lab","h_MUDEC_thpimu_lab",100,0,1.);

  h_MUDEC_pmupar = new TH2F("h_MUDEC_pmupar","h_MUDEC_pmupar",100,0.,3.,100,0.,3.);//GeV

  // to check the geometry and comare to g3 through hits map
  h_geom_g4 = new TH2F("h_geom_g4","h_geom_g4",2000,-22,-18,2000,0,2.1);
  //h_geom_g4 = new TH2F("h_geom_g4","h_geom_g4",2000,-23,-18,2000,0,2.5);
  //h_geom_g4 = new TH2F("h_geom_g4","h_geom_g4",2000,-23,23,2000,0,2.5);

  //h_decay_flags = new TH1F("h_decay_flags","h_decay_flags",23,-1.5,20.5);
  h_decay_flags = new TH1F("h_decay_flags","h_decay_flags",200,0,32);
  h_decay_NUM = new TH1F("h_decay_NUM","h_decay_NUM",200,0,32);
  h_decay_BR = new TH1F("h_decay_BR","h_decay_BR",200,0,32);
  h_decay_BR_PDG = new TH1F("h_decay_BR_PDG","h_decay_BR_PDG",200,0,32);

  h_decay_BR_PDG->Fill(30,99.9877);  
  h_decay_BR_PDG->Fill(31,99.9877);  
  h_decay_BR_PDG->Fill(1,63.51);  
  h_decay_BR_PDG->Fill(2,63.51);  
  h_decay_BR_PDG->Fill(3,21.17);  
  h_decay_BR_PDG->Fill(4,21.17);  
  h_decay_BR_PDG->Fill(5,5.59);  
  h_decay_BR_PDG->Fill(6,5.59);  
  h_decay_BR_PDG->Fill(7,4.82);  
  h_decay_BR_PDG->Fill(8,4.82);  
  h_decay_BR_PDG->Fill(9,3.18);  
  h_decay_BR_PDG->Fill(10,3.18);  
  h_decay_BR_PDG->Fill(11,1.73);  
  h_decay_BR_PDG->Fill(12,1.73);  
  h_decay_BR_PDG->Fill(13,19.35);  
  h_decay_BR_PDG->Fill(14,19.35);  
  h_decay_BR_PDG->Fill(15,13.5);  
  h_decay_BR_PDG->Fill(16,13.5);  
  h_decay_BR_PDG->Fill(17,21.5);  
  h_decay_BR_PDG->Fill(18,12.38);  
  h_decay_BR_PDG->Fill(19,68.61);  
  h_decay_BR_PDG->Fill(20,31.39);  


  //h_prim_match_pi = new TH2F("h_prim_match_pi","h_prim_match_pi",200,0.,3.,200,0.,3.);
  //h_prim_match_ka = new TH2F("h_prim_match_ka","h_prim_match_ka",200,0.,3.,200,0.,3.);
  //h_prim_match_k0 = new TH2F("h_prim_match_k0","h_prim_match_k0",200,0.,3.,200,0.,3.);

  h_prim_match_pi = new TH2F("h_prim_match_pi","h_prim_match_pi",200,-0.05,0.05,200,0.98,1.02);
  h_prim_match_ka = new TH2F("h_prim_match_ka","h_prim_match_ka",200,-0.05,0.05,200,0.98,1.02);
  h_prim_match_k0 = new TH2F("h_prim_match_k0","h_prim_match_k0",200,-0.05,0.05,200,0.98,1.02);

  //histoManager->book();
}

void SBRunAction::CheckEOF(){
  if(primaryGen->myEOF){
    G4cout << "********************************************************" << G4endl;
    G4cout << "********************************************************" << G4endl;
    G4cout << "********************************************************" << G4endl;
    G4cout << "SBRunAction::CheckEOF() : EOF detected. Run will finish." << G4endl;
    G4cout << "********************************************************" << G4endl;
    G4cout << "********************************************************" << G4endl;
    G4cout << "********************************************************" << G4endl;
    G4RunManager::GetRunManager()->AbortRun();
  }
}

void SBRunAction::fillPerEvent(G4double ETarg,
			       G4double EGap,
			       G4double LTarg,
			       G4double LGap)
{

  G4cout<<"CALL SBRunAction::fillPerEvent "<<G4endl;
  //accumulate statistic
  //
  sumETarg += ETarg;  sum2ETarg += ETarg*ETarg;
  sumEGap += EGap;  sum2EGap += EGap*EGap;
  
  sumLTarg += LTarg;  sum2LTarg += LTarg*LTarg;
  sumLGap += LGap;  sum2LGap += LGap*LGap;  

  //m_hh->h_ETarg->Fill(ETarg);
  h_ETarg->Fill(ETarg);
  h_LTarg->Fill(LTarg);
}


void SBRunAction::DIFStat(G4double ndifpiplus,
			  G4double ndifpiminus,
			  G4double ndifkplus,
			  G4double ndifkminus,
			  G4double ndifk0S,
			  G4double ndifk0L)
{

  G4cout<<"CALL SBRunAction::DIFStat "<<G4endl;
  //accumulate statistic
  //
  NDIF_piplus_TOT += ndifpiplus;
  NDIF_piminus_TOT += ndifpiminus;
  NDIF_Kplus_TOT += ndifkplus;
  NDIF_Kminus_TOT += ndifkminus;
  NDIF_KzeroS_TOT += ndifk0S;
  NDIF_KzeroL_TOT += ndifk0L;

}

void SBRunAction::fillPerEvent1(G4double p_muplus_PI,
			       G4double p_muminus_PI,
			       G4double p_muplus_K,
			       G4double p_muminus_K,
			       G4double E_numu_PI,
			       G4double E_anumu_PI,
			       G4double E_numu_K,
			       G4double E_anumu_K)
{
  G4cout<<"CALL SBRunAction::fillPerEvent1 "<<G4endl;

  if(p_muplus_PI)h_p_muplus_PI->Fill(p_muplus_PI/GeV);
  if(p_muminus_PI)h_p_muminus_PI->Fill(p_muminus_PI/GeV);
  if(p_muplus_K)h_p_muplus_K->Fill(p_muplus_K/GeV);
  if(p_muminus_K)h_p_muminus_K->Fill(p_muminus_K/GeV);

  if(E_numu_PI)pions_numu_du_pi_NW->Fill(E_numu_PI/GeV);
  if(E_anumu_PI)pions_anumu_du_pi_NW->Fill(E_anumu_PI/GeV);
  if(E_numu_K)kaons_numu_du_ka_NW->Fill(E_numu_K/GeV);
  if(E_anumu_K)kaons_anumu_du_ka_NW->Fill(E_anumu_K/GeV);
}

void SBRunAction::fillDIF(
			  G4double x,
			  G4double y,
			  G4double z,
			  G4double px,
			  G4double py,
			  G4double pz,
			  G4double pxnu,
			  G4double pynu,
			  G4double pznu,
			  G4int moth,
			  G4int q)
{
  G4cout<<"CALL SBRunAction::fillDIF "<<G4endl;
  G4double r=sqrt(x*x+y*y);
  G4double p=sqrt((px*px)+(py*py)+(pz*pz));
  G4double enu=sqrt((pxnu*pxnu)+(pynu*pynu)+(pznu*pznu));
  G4double th=0,thnu=0;
  G4double THFOR = 0.01;

  if(p)th=acos(pz/p);

  G4double OffAxisAngle=3.141592*2.5/180.;
  G4double OffAxisPhi=0;

  G4double eOME[3]={0.,0.,0.};
  eOME[0]=sin(OffAxisAngle)*cos(OffAxisPhi);
  eOME[1]=sin(OffAxisAngle)*sin(OffAxisPhi);
  eOME[2]=cos(OffAxisAngle);

  if(enu)thnu=acos(((eOME[0]*pxnu)+(eOME[1]*pynu)+(eOME[2]*pznu))/enu);

  //G4cout << "MYENU "<<enu/GeV <<" "<<thnu<< G4endl;

  if(q==1){//plus

    if(moth==1){//pi
      if(r)h_piplus_DIF_r->Fill(r/cm);
      if(z)h_piplus_DIF_z->Fill(z/m);
      if(x&&y)h_piplus_DIF_xy->Fill(x/m,y/m);
      if(z&&r)h_piplus_DIF_zr->Fill(z/m,r/cm);
      if(p&&th)h_piplus_DIF_thp->Fill(th,p/GeV);
      if(p&&th)h_piplus_DIF_thp_EnuW->Fill(th,p/GeV,enu/GeV);
      if(th&&thnu)h_piplus_DIF_thpinu->Fill(th,thnu);
      if(enu&&thnu)h_piplus_DIF_Ethnu->Fill(thnu,enu/GeV);
      if(thnu<THFOR)h_piplus_DIF_EnuForw->Fill(enu/GeV);
    } else if (moth==2){//K
      if(r)h_Kplus_DIF_r->Fill(r/cm);
      if(z)h_Kplus_DIF_z->Fill(z/m);
      if(x&&y)h_Kplus_DIF_xy->Fill(x/m,y/m);
      if(z&&r)h_Kplus_DIF_zr->Fill(z/m,r/cm);
      if(p&&th)h_Kplus_DIF_thp->Fill(th,p/GeV);
      if(p&&th)h_Kplus_DIF_thp_EnuW->Fill(th,p/GeV,enu/GeV);
      if(th&&thnu)h_Kplus_DIF_thpinu->Fill(th,thnu);
      if(enu&&thnu)h_Kplus_DIF_Ethnu->Fill(thnu,enu/GeV);
      if(thnu<THFOR)h_Kplus_DIF_EnuForw->Fill(enu/GeV);
    }
    
  } else if (q==-1){
    
    if(moth==1){//pi
      if(r)h_piminus_DIF_r->Fill(r/cm);
      if(z)h_piminus_DIF_z->Fill(z/m);
      if(x&&y)h_piminus_DIF_xy->Fill(x/m,y/m);
      if(z&&r)h_piminus_DIF_zr->Fill(z/m,r/cm);
      if(p&&th)h_piminus_DIF_thp->Fill(th,p/GeV);
      if(p&&th)h_piminus_DIF_thp_EnuW->Fill(th,p/GeV,enu/GeV);
      if(th&&thnu)h_piminus_DIF_thpinu->Fill(th,thnu);
      if(enu&&thnu)h_piminus_DIF_Ethnu->Fill(thnu,enu/GeV);
      if(thnu<THFOR)h_piminus_DIF_EnuForw->Fill(enu/GeV);
    } else if (moth==2){//K
      if(r)h_Kminus_DIF_r->Fill(r/cm);
      if(z)h_Kminus_DIF_z->Fill(z/m);
      if(x&&y)h_Kminus_DIF_xy->Fill(x/m,y/m);
      if(z&&r)h_Kminus_DIF_zr->Fill(z/m,r/cm);
      if(p&&th)h_Kminus_DIF_thp->Fill(th,p/GeV);
      if(p&&th)h_Kminus_DIF_thp_EnuW->Fill(th,p/GeV,enu/GeV);
      if(th&&thnu)h_Kminus_DIF_thpinu->Fill(th,thnu);
      if(enu&&thnu)h_Kminus_DIF_Ethnu->Fill(thnu,enu/GeV);
      if(thnu<THFOR)h_Kminus_DIF_EnuForw->Fill(enu/GeV);
    }
    
  }
}

void SBRunAction::fillEXIT(G4double x,
			   G4double y,
			   G4double z,
			   G4double px,
			   G4double py,
			   G4double pz,
			   G4int moth)
{
  G4cout<<"CALL SBRunAction::fillEXIT "<<G4endl;
  G4double r = sqrt(x*x+y*y);
  G4double p = sqrt(px*px+py*py+pz*pz);
  G4double pt = sqrt(px*px+py*py);
  G4double th = 0;
  if(p)th=acos(pz/p);

  if((p!=0.)&&(x!=0.)&&(y!=0.)&&(z!=0.)){

    if(r<3/cm)G4cout <<"SBRunAction: EXIT POINT x "<< 
	     x/cm <<" y "<< y/cm <<" r "<< r/cm<<" (cm) "
		  <<" p "<<p/GeV<<" (GeV) z "<<z/m<< " (m) "
		  <<G4endl;

/////////////////////////////////////////////////

    if(moth==1){//piplus
      h_pt_exit_piplus->Fill(pt/GeV);
      h_p_exit_piplus->Fill(p/GeV);
      h_xy_exit_piplus->Fill(x/cm,y/cm);
      h_z_exit_piplus->Fill(z/m);
      //G4cout <<" crash " <<z/m <<G4endl;
      h_r_exit_piplus->Fill(r/cm);
      h_pVSr_exit_piplus->Fill(p/GeV,r/cm);
      h_pVStheta_exit_piplus->Fill(th,p/GeV);
      h_thetaVSr_exit_piplus->Fill(th,r/cm);
      h_theta_exit_piplus->Fill(th);
    } else if (moth==2){//piminus
      h_pt_exit_piminus->Fill(pt/GeV);
      h_p_exit_piminus->Fill(p/GeV);
      h_xy_exit_piminus->Fill(x/cm,y/cm);
      h_z_exit_piminus->Fill(z/m);
      h_r_exit_piminus->Fill(r/cm);
      h_pVSr_exit_piminus->Fill(p/GeV,r/cm);
      h_pVStheta_exit_piminus->Fill(th,p/GeV);
      h_thetaVSr_exit_piminus->Fill(th,r/cm);
      h_theta_exit_piminus->Fill(th);
    }else if(moth==3){//muplus
      h_pt_exit_muplus->Fill(pt/GeV);
      h_p_exit_muplus->Fill(p/GeV);
      h_xy_exit_muplus->Fill(x/cm,y/cm);
      h_z_exit_muplus->Fill(z/m);
      h_r_exit_muplus->Fill(r/cm);
      h_pVSr_exit_muplus->Fill(p/GeV,r/cm);
      h_pVStheta_exit_muplus->Fill(th,p/GeV);
      h_thetaVSr_exit_muplus->Fill(th,r/cm);
      h_theta_exit_muplus->Fill(th);    
    } else if (moth==4){//muminus
      h_pt_exit_muminus->Fill(pt/GeV);
      h_p_exit_muminus->Fill(p/GeV);
      h_xy_exit_muminus->Fill(x/cm,y/cm);
      h_z_exit_muminus->Fill(z/m);
      h_r_exit_muminus->Fill(r/cm);
      h_pVSr_exit_muminus->Fill(p/GeV,r/cm);
      h_pVStheta_exit_muminus->Fill(th,p/GeV);
      h_thetaVSr_exit_muminus->Fill(th,r/cm);
      h_theta_exit_muminus->Fill(th);    
    } else if(moth==5){//kplus
      h_pt_exit_kplus->Fill(pt/GeV);
      h_p_exit_kplus->Fill(p/GeV);
      h_xy_exit_kplus->Fill(x/cm,y/cm);
      h_z_exit_kplus->Fill(z/m);
      h_r_exit_kplus->Fill(r/cm);
      h_pVSr_exit_kplus->Fill(p/GeV,r/cm);
      h_pVStheta_exit_kplus->Fill(th,p/GeV);
      h_thetaVSr_exit_kplus->Fill(th,r/cm);
      h_theta_exit_kplus->Fill(th);    
    } else if (moth==6){//kminus
      h_pt_exit_kminus->Fill(pt/GeV);
      h_p_exit_kminus->Fill(p/GeV);
      h_xy_exit_kminus->Fill(x/cm,y/cm);
      h_z_exit_kminus->Fill(z/m);
      h_r_exit_kminus->Fill(r/cm);
      h_pVSr_exit_kminus->Fill(p/GeV,r/cm);
      h_pVStheta_exit_kminus->Fill(th,p/GeV);
      h_thetaVSr_exit_kminus->Fill(th,r/cm);
      h_theta_exit_kminus->Fill(th);    
    } else  if(moth==7){//k0L
      h_pt_exit_k0L->Fill(pt/GeV);
      h_p_exit_k0L->Fill(p/GeV);
      h_xy_exit_k0L->Fill(x/cm,y/cm);
      h_z_exit_k0L->Fill(z/m);
      h_r_exit_k0L->Fill(r/cm);
      h_pVSr_exit_k0L->Fill(p/GeV,r/cm);
      h_pVStheta_exit_k0L->Fill(th,p/GeV);
      h_thetaVSr_exit_k0L->Fill(th,r/cm);
      h_theta_exit_k0L->Fill(th);    
    }
  }
}


void SBRunAction::fillTARG(/*G4double x,
			   G4double y,
			   G4double z,
			   G4double px,
			   G4double py,
			   G4double pz,
			   G4int moth*/
			   G4double enu=0)
{
  G4cout<<"CALL SBRunAction::fillTARG "<<G4endl;
  G4double x=primaryGen->XPrimary;
  G4double y=primaryGen->YPrimary;
  G4double z=primaryGen->ZPrimary;
  G4double zabs=primaryGen->ZPrimary_G4frame;
  G4double px=primaryGen->PXPrimary;
  G4double py=primaryGen->PYPrimary;
  G4double pz=primaryGen->PZPrimary;

  //G4int moth=1; // temp!!
  //G4double r = sqrt(x*x+y*y);

  G4double p = sqrt((px*px)+(py*py)+(pz*pz));
  G4double pt = sqrt((px*px)+(py*py));
  G4double th = 0;
  if(p)th=acos(pz/p);
  
  //G4cout <<" brius "<< th << " "<< p/GeV <<" "<<primaryGen->particleName<<G4endl;

  if((p!=0.)&&(x!=0.)&&(y!=0.)&&(z!=0.)){
    if(primaryGen->particleName=="pi+"){
      h_pt_targ_piplus->Fill(pt/GeV);
      h_p_targ_piplus->Fill(p/GeV);
      h_z_targ_piplus->Fill(z/cm);
      h_zabs_targ_piplus->Fill(zabs/m);
      h_pVStheta_targ_piplus->Fill(th,p/GeV);
      h_theta_targ_piplus->Fill(th);

      for(int j=0;j<NENB;j++){
	//G4cout << "pernice "<<enu/GeV<<" "<<ENULIMS[j]<<G4endl;
	if((enu/GeV>ENULIMS[j])&&(enu/GeV<ENULIMS[j+1])){
	  h_pVStheta_targ_piplus_Enubins[j]->Fill(th,p/GeV);
	  h_theta_targ_piplus_Enubins[j]->Fill(th);
	  h_p_targ_piplus_Enubins[j]->Fill(p/GeV);
	}
      }


    } else if(primaryGen->particleName=="pi-"){
      h_pt_targ_piminus->Fill(pt/GeV);
      h_p_targ_piminus->Fill(p/GeV);
      h_z_targ_piminus->Fill(z/cm);
      h_zabs_targ_piminus->Fill(zabs/m);
      h_pVStheta_targ_piminus->Fill(th,p/GeV);
      h_theta_targ_piminus->Fill(th);

      for(int j=0;j<NENB;j++){
	if((enu/GeV>ENULIMS[j])&&(enu/GeV<ENULIMS[j+1])){
	  h_pVStheta_targ_piminus_Enubins[j]->Fill(th,p/GeV);
	  h_theta_targ_piminus_Enubins[j]->Fill(th);
	  h_p_targ_piminus_Enubins[j]->Fill(p/GeV);
	}
      }

    }
  }
}

void SBRunAction::EndOfRunAction(const G4Run* aRun)
{
  G4cout<<"CALL SBRunAction::EndOfRunAction "<<G4endl;
  G4int NbOfEvents = aRun->GetNumberOfEvent();
  if (NbOfEvents == 0) return;
  
  DoFinalOps(NbOfEvents);

}


void SBRunAction::FluxesStats()
{
  G4cout <<" ---------------------------------------------------- "<<G4endl;
  G4cout << "integrated fluxes 100 m2 100 Km 1 y =10^7s Pow=4 MW:  "<<G4endl;
  G4cout << "pions_numu_du_pi "<< pions_numu_du_pi->Integral() <<G4endl;
  G4cout << "pions_anumu_du_pi "<< pions_anumu_du_pi->Integral() <<G4endl;
  G4cout << "pions_nue_du_mu "<< pions_nue_du_mu->Integral() <<G4endl;
  G4cout <<" ---------------------------------------------------- "<<G4endl;
  /*
  h_composition->Fill(0.,pions_numu_du_pi->Integral());
  h_composition->Fill(1.,pions_anumu_du_pi->Integral());
  h_composition->Fill(2.,pions_nue_du_mu->Integral());
  h_composition->Fill(3.,pions_anumu_du_mu->Integral());
  h_composition->Fill(4.,pions_anue_du_mu->Integral());
  h_composition->Fill(5.,pions_numu_du_mu->Integral());
  h_composition->Fill(6.,kaons_numu_du_ka->Integral());
  h_composition->Fill(7.,kaons_anumu_du_ka->Integral());
  h_composition->Fill(8.,kaons_numu_du_pi->Integral());
  h_composition->Fill(9.,kaons_anumu_du_pi->Integral());
  h_composition->Fill(10.,kaons_nue_du_mu->Integral());
  h_composition->Fill(11.,kaons_anumu_du_mu->Integral());
  h_composition->Fill(12.,kaons_anue_du_mu->Integral());
  h_composition->Fill(13.,kaons_numu_du_mu->Integral());
  h_composition->Fill(14.,kaons_numu_du_3->Integral());
  h_composition->Fill(15.,kaons_anumu_du_3->Integral());
  h_composition->Fill(16.,kaons_nue_du_3->Integral());
  h_composition->Fill(17.,kaons_anue_du_3->Integral());
  h_composition->Fill(18.,kzeros_numu_du_pi->Integral());
  h_composition->Fill(19.,kzeros_anumu_du_pi->Integral());
  h_composition->Fill(20.,kzeros_nue_du_mu->Integral());
  h_composition->Fill(21.,kzeros_anumu_du_mu->Integral());
  h_composition->Fill(22.,kzeros_anue_du_mu->Integral());
  h_composition->Fill(23.,kzeros_numu_du_mu->Integral());
  h_composition->Fill(24.,kzeros_numu_du_3->Integral());
  h_composition->Fill(25.,kzeros_anumu_du_3->Integral());
  h_composition->Fill(26.,kzeros_nue_du_3->Integral());
  h_composition->Fill(27.,kzeros_anue_du_3->Integral());
  */
  G4double numuf=
    pions_numu_du_pi->Integral()+
    pions_numu_du_mu->Integral()+
    kaons_numu_du_ka->Integral()+
    kaons_numu_du_pi->Integral()+
    kaons_numu_du_mu->Integral()+
    kaons_numu_du_3->Integral()+
    kzeros_numu_du_pi->Integral()+
    kzeros_numu_du_mu->Integral()+
    kzeros_numu_du_3->Integral();
  G4double anumuf=
    pions_anumu_du_pi->Integral()+
    pions_anumu_du_mu->Integral()+
    kaons_anumu_du_ka->Integral()+
    kaons_anumu_du_pi->Integral()+
    kaons_anumu_du_mu->Integral()+
    kaons_anumu_du_3->Integral()+
    kzeros_anumu_du_pi->Integral()+
    kzeros_anumu_du_mu->Integral()+
    kzeros_anumu_du_3->Integral();
  G4double nuef=
    pions_nue_du_mu->Integral()+
    kaons_nue_du_mu->Integral()+
    kaons_nue_du_3->Integral()+
    kzeros_nue_du_mu->Integral()+
    kzeros_nue_du_3->Integral();
  G4double anuef=
    pions_anue_du_mu->Integral()+
    kaons_anue_du_mu->Integral()+
    kaons_anue_du_3->Integral()+
    kzeros_anue_du_mu->Integral()+
    kzeros_anue_du_3->Integral(); 

  G4double TOTf = numuf+anumuf+nuef+anuef;

  G4cout <<" ---------------------------------------------------- "<<G4endl;
  G4cout << "numu      "<< numuf <<" ("<<100.*numuf/TOTf<<") %"<<G4endl;
  G4cout << "anti-numu "<< anumuf <<" ("<<100.*anumuf/TOTf<<") %"<<G4endl;
  G4cout << "nue       "<< nuef <<" ("<<100.*nuef/TOTf<<") %"<<G4endl;
  G4cout << "antinue   "<< anuef <<" ("<<100.*anuef/TOTf<<") %"<<G4endl;
  G4cout <<" ---------------------------------------------------- "<<G4endl;
  G4cout << "TOTAL "<< TOTf <<G4endl;
  G4cout <<" ---------------------------------------------------- "<<G4endl;

}

void SBRunAction::SumFluxesFlavours()
{
  //----//

  h_numu->Add(pions_numu_du_pi);
  h_numu->Add(pions_numu_du_mu);

  h_numu->Add(kaons_numu_du_ka);
  h_numu->Add(kaons_numu_du_pi);
  h_numu->Add(kaons_numu_du_mu);
  h_numu->Add(kaons_numu_du_3);

  h_numu->Add(kzeros_numu_du_pi);
  h_numu->Add(kzeros_numu_du_mu);
  h_numu->Add(kzeros_numu_du_3);

  //----//

  h_anumu->Add(pions_anumu_du_pi);
  h_anumu->Add(pions_anumu_du_mu);

  h_anumu->Add(kaons_anumu_du_ka);
  h_anumu->Add(kaons_anumu_du_pi);
  h_anumu->Add(kaons_anumu_du_mu);
  h_anumu->Add(kaons_anumu_du_3);

  h_anumu->Add(kzeros_anumu_du_pi);
  h_anumu->Add(kzeros_anumu_du_mu);
  h_anumu->Add(kzeros_anumu_du_3);

  //----//

  h_nue->Add(pions_nue_du_mu);
  h_nue->Add(kaons_nue_du_mu);
  h_nue->Add(kaons_nue_du_3);
  h_nue->Add(kzeros_nue_du_mu);
  h_nue->Add(kzeros_nue_du_3);

  //----//

  h_anue->Add(pions_anue_du_mu);
  h_anue->Add(kaons_anue_du_mu);
  h_anue->Add(kaons_anue_du_3);
  h_anue->Add(kzeros_anue_du_mu);
  h_anue->Add(kzeros_anue_du_3);

}

//void SBRunAction::PrepareGLoBESFlux(char* fname="nufluxes_GLOBESformat.txt",G4double L=130.)
void SBRunAction::PrepareGLoBESFlux(G4String fname="nufluxes_GLOBESformat.txt",G4double L=130.)
{
  double scal = pow(100./L,2);
  //double bwscale = 0.02/h_nue->GetBinWidth(1);// norm factor in GLOBES valid for 20MeV bins !
  //scal*=bwscale;

  ofstream fout(fname);
  double nutau=0,antinutau=0;
  for(int i=1;i<h_numu->GetNbinsX();i++){
    fout 
      << h_numu->GetBinCenter(i)+0.5*h_nue->GetBinWidth(i)<< " " 
      << scal*h_nue->GetBinContent(i) << " " 
      << scal*h_numu->GetBinContent(i) << " " 
      << scal*nutau << " "
      << scal*h_anue->GetBinContent(i) << " " 
      << scal*h_anumu->GetBinContent(i) << " " 
      << scal*antinutau
      << G4endl;
    G4cout 
      << h_numu->GetBinCenter(i)+0.5*h_nue->GetBinWidth(i)<< " " 
      << scal*h_nue->GetBinContent(i) << " " 
      << scal*h_numu->GetBinContent(i) << " " 
      << scal*nutau << " "
      << scal*h_anue->GetBinContent(i) << " " 
      << scal*h_anumu->GetBinContent(i) << " " 
      << scal*antinutau
      << G4endl;
  }

  int nleft = 502-ENbins;
  for(int i=0;i<nleft;i++){
    fout 
      << EnuMAX/GeV+h_nue->GetBinWidth(i)*i << " " 
      << 0. << " " 
      << 0. << " " 
      << 0. << " "
      << 0. << " " 
      << 0. << " " 
      << 0.
      << G4endl;
  }
  fout.close();
  //system(Form("cat completamento.dat >> %s",fname));
  G4cout << fname << " created. Scaled by " << scal <<" (100/130)^2. "<< L <<" Km "<< G4endl; 

}

void SBRunAction::DoFinalOps(G4int NbOfEvents){
  

  G4cout<<"SBRunAction::DoFinalOps"<<G4endl;

 //compute statistics: mean and rms
  //
  sumETarg /= NbOfEvents; sum2ETarg /= NbOfEvents;
  G4double rmsETarg = sum2ETarg - sumETarg*sumETarg;
  if (rmsETarg >0.) rmsETarg = std::sqrt(rmsETarg); else rmsETarg = 0.;
  
  sumEGap /= NbOfEvents; sum2EGap /= NbOfEvents;
  G4double rmsEGap = sum2EGap - sumEGap*sumEGap;
  if (rmsEGap >0.) rmsEGap = std::sqrt(rmsEGap); else rmsEGap = 0.;
  
  sumLTarg /= NbOfEvents; sum2LTarg /= NbOfEvents;
  G4double rmsLTarg = sum2LTarg - sumLTarg*sumLTarg;
  if (rmsLTarg >0.) rmsLTarg = std::sqrt(rmsLTarg); else rmsLTarg = 0.;
  
  sumLGap /= NbOfEvents; sum2LGap /= NbOfEvents;
  G4double rmsLGap = sum2LGap - sumLGap*sumLGap;
  if (rmsLGap >0.) rmsLGap = std::sqrt(rmsLGap); else rmsLGap = 0.;
  
  //histoManager->FillHisto(1,sumETarg,1.);
  //histoManager->FillHisto(2,rmsETarg,1.);

  //histoManager->FillHisto(3,sumLTarg,1.);
  //histoManager->FillHisto(4,rmsLTarg,1.);

  //histoManager->PrintHisto(1);
  //histoManager->PrintHisto(2);

  //histoManager->save();
  ////histoManager->saveAscii();


  /**************************************/
  // normalize to number of processed pots !
  G4double ProcEvtsScale = 1.e6/primaryGen->GetFLUKAPOTs();
  G4double K_REP = primaryGen->K_REPL;

  G4cout << "SBRunAction: K replication factor used in fluxes scaling "<< K_REP << G4endl;

  pions_numu_du_pi_IDEAL->Scale(ProcEvtsScale);

  pions_numu_du_pi->Scale(ProcEvtsScale);
  pions_anumu_du_pi->Scale(ProcEvtsScale);

  pions_numu_du_pi_CLONE->Scale(ProcEvtsScale);
  pions_anumu_du_pi_CLONE->Scale(ProcEvtsScale);
  
  pions_numu_du_mu->Scale(ProcEvtsScale);
  pions_anumu_du_mu->Scale(ProcEvtsScale);
  pions_nue_du_mu->Scale(ProcEvtsScale);
  pions_anue_du_mu->Scale(ProcEvtsScale);
  
  kaons_numu_du_ka->Scale(ProcEvtsScale/K_REP);
  kaons_anumu_du_ka->Scale(ProcEvtsScale/K_REP);
  
  kaons_numu_du_pi->Scale(ProcEvtsScale/K_REP);
  kaons_anumu_du_pi->Scale(ProcEvtsScale/K_REP);
  
  kaons_nue_du_mu->Scale(ProcEvtsScale/K_REP);
  kaons_anumu_du_mu->Scale(ProcEvtsScale/K_REP);
  kaons_anue_du_mu->Scale(ProcEvtsScale/K_REP);
  kaons_numu_du_mu->Scale(ProcEvtsScale/K_REP);
  
  kaons_numu_du_3->Scale(ProcEvtsScale/K_REP);
  kaons_anumu_du_3->Scale(ProcEvtsScale/K_REP);
  kaons_nue_du_3->Scale(ProcEvtsScale/K_REP);
  kaons_anue_du_3->Scale(ProcEvtsScale/K_REP);
  
  kzeros_numu_du_pi->Scale(ProcEvtsScale/K_REP);
  kzeros_anumu_du_pi->Scale(ProcEvtsScale/K_REP);
  
  kzeros_nue_du_mu->Scale(ProcEvtsScale/K_REP);
  kzeros_anumu_du_mu->Scale(ProcEvtsScale/K_REP);
  kzeros_anue_du_mu->Scale(ProcEvtsScale/K_REP);
  kzeros_numu_du_mu->Scale(ProcEvtsScale/K_REP);
  
  kzeros_numu_du_3->Scale(ProcEvtsScale/K_REP);
  kzeros_anumu_du_3->Scale(ProcEvtsScale/K_REP);
  kzeros_nue_du_3->Scale(ProcEvtsScale/K_REP);
  kzeros_anue_du_3->Scale(ProcEvtsScale/K_REP);
  
  //
  
  G4cout << "Processed FLUKA events is " << primaryGen->GetFLUKAPOTs()<<"."<< G4endl;
  G4cout << "Normalization factor " << ProcEvtsScale <<" applied to fluxes."<< G4endl;  

  G4cout << "decay in flight summary: "<< 
    " pi+ "<<NDIF_piplus_TOT<<
    " pi- "<<NDIF_piminus_TOT<<
    " K+ "<<NDIF_Kplus_TOT<<
    " K- "<<NDIF_Kminus_TOT<<
    " K0L "<<NDIF_KzeroL_TOT<<
    " K0S "<<NDIF_KzeroS_TOT<<G4endl;

  G4cout << "    per/p.o.t.: "<< 
    " pi+ "<<NDIF_piplus_TOT/primaryGen->GetFLUKAPOTs()<<
    " pi- "<<NDIF_piminus_TOT/primaryGen->GetFLUKAPOTs()<<
    " K+ "<<NDIF_Kplus_TOT/primaryGen->GetFLUKAPOTs()<<
    " K- "<<NDIF_Kminus_TOT/primaryGen->GetFLUKAPOTs()<<G4endl;

  G4cout <<"NUFLUXES "<<
    pions_numu_du_pi->Integral() << " " <<
    pions_anumu_du_pi->Integral()<< " " <<
    kaons_numu_du_ka->Integral() << " " <<
    kaons_anumu_du_ka->Integral()<< " " <<
    pions_numu_du_mu->Integral() << " " <<
    pions_anumu_du_mu->Integral()<< " " <<
    pions_nue_du_mu->Integral() << " " <<
    pions_anue_du_mu->Integral()<< " " << 
    G4endl;


  /********/

  h_pt_exit_piplus->Scale(ProcEvtsScale);
  h_p_exit_piplus->Scale(ProcEvtsScale);
  h_xy_exit_piplus->Scale(ProcEvtsScale);
  h_z_exit_piplus->Scale(ProcEvtsScale);
  h_r_exit_piplus->Scale(ProcEvtsScale);
  h_pVSr_exit_piplus->Scale(ProcEvtsScale);
  h_pVStheta_exit_piplus->Scale(ProcEvtsScale);
  h_thetaVSr_exit_piplus->Scale(ProcEvtsScale);
  h_theta_exit_piplus->Scale(ProcEvtsScale);
  
  h_pt_exit_piminus->Scale(ProcEvtsScale);
  h_p_exit_piminus->Scale(ProcEvtsScale);
  h_xy_exit_piminus->Scale(ProcEvtsScale);
  h_z_exit_piminus->Scale(ProcEvtsScale);
  h_r_exit_piminus->Scale(ProcEvtsScale);
  h_pVSr_exit_piminus->Scale(ProcEvtsScale);
  h_pVStheta_exit_piminus->Scale(ProcEvtsScale);
  h_thetaVSr_exit_piminus->Scale(ProcEvtsScale);
  h_theta_exit_piminus->Scale(ProcEvtsScale);
  
  h_pt_exit_kplus->Scale(ProcEvtsScale);
  h_p_exit_kplus->Scale(ProcEvtsScale);
  h_xy_exit_kplus->Scale(ProcEvtsScale);
  h_z_exit_kplus->Scale(ProcEvtsScale);
  h_r_exit_kplus->Scale(ProcEvtsScale);
  h_pVSr_exit_kplus->Scale(ProcEvtsScale);
  h_pVStheta_exit_kplus->Scale(ProcEvtsScale);
  h_thetaVSr_exit_kplus->Scale(ProcEvtsScale);
  h_theta_exit_kplus->Scale(ProcEvtsScale);

  h_pt_exit_kminus->Scale(ProcEvtsScale);
  h_p_exit_kminus->Scale(ProcEvtsScale);
  h_xy_exit_kminus->Scale(ProcEvtsScale);
  h_z_exit_kminus->Scale(ProcEvtsScale);
  h_r_exit_kminus->Scale(ProcEvtsScale);
  h_pVSr_exit_kminus->Scale(ProcEvtsScale);
  h_pVStheta_exit_kminus->Scale(ProcEvtsScale);
  h_thetaVSr_exit_kminus->Scale(ProcEvtsScale);
  h_theta_exit_kminus->Scale(ProcEvtsScale);
  
  h_pt_exit_muplus->Scale(ProcEvtsScale);
  h_p_exit_muplus->Scale(ProcEvtsScale);
  h_xy_exit_muplus->Scale(ProcEvtsScale);
  h_z_exit_muplus->Scale(ProcEvtsScale);
  h_r_exit_muplus->Scale(ProcEvtsScale);
  h_pVSr_exit_muplus->Scale(ProcEvtsScale);
  h_pVStheta_exit_muplus->Scale(ProcEvtsScale);
  h_thetaVSr_exit_muplus->Scale(ProcEvtsScale);
  h_theta_exit_muplus->Scale(ProcEvtsScale);
  
  h_pt_exit_muminus->Scale(ProcEvtsScale);
  h_p_exit_muminus->Scale(ProcEvtsScale);
  h_xy_exit_muminus->Scale(ProcEvtsScale);
  h_z_exit_muminus->Scale(ProcEvtsScale);
  h_r_exit_muminus->Scale(ProcEvtsScale);
  h_pVSr_exit_muminus->Scale(ProcEvtsScale);
  h_pVStheta_exit_muminus->Scale(ProcEvtsScale);
  h_thetaVSr_exit_muminus->Scale(ProcEvtsScale);
  h_theta_exit_muminus->Scale(ProcEvtsScale);
  
  h_pt_exit_k0L->Scale(ProcEvtsScale);
  h_p_exit_k0L->Scale(ProcEvtsScale);
  h_xy_exit_k0L->Scale(ProcEvtsScale);
  h_z_exit_k0L->Scale(ProcEvtsScale);
  h_r_exit_k0L->Scale(ProcEvtsScale);
  h_pVSr_exit_k0L->Scale(ProcEvtsScale);
  h_pVStheta_exit_k0L->Scale(ProcEvtsScale);
  h_thetaVSr_exit_k0L->Scale(ProcEvtsScale);
  h_theta_exit_k0L->Scale(ProcEvtsScale);

  // target level

  h_pt_targ_piplus->Scale(ProcEvtsScale);
  h_p_targ_piplus->Scale(ProcEvtsScale);
  h_z_targ_piplus->Scale(ProcEvtsScale);
  h_zabs_targ_piplus->Scale(ProcEvtsScale);
  h_pVStheta_targ_piplus->Scale(ProcEvtsScale);
  h_theta_targ_piplus->Scale(ProcEvtsScale);
  
  h_pt_targ_piminus->Scale(ProcEvtsScale);
  h_p_targ_piminus->Scale(ProcEvtsScale);
  h_z_targ_piminus->Scale(ProcEvtsScale);
  h_zabs_targ_piminus->Scale(ProcEvtsScale);
  h_pVStheta_targ_piminus->Scale(ProcEvtsScale);
  h_theta_targ_piminus->Scale(ProcEvtsScale);

  // DIF

  h_piminus_DIF_r->Scale(ProcEvtsScale);
  h_piminus_DIF_z->Scale(ProcEvtsScale);
  h_piminus_DIF_xy->Scale(ProcEvtsScale);
  h_piminus_DIF_zr->Scale(ProcEvtsScale);
  
  h_Kminus_DIF_r->Scale(ProcEvtsScale);
  h_Kminus_DIF_z->Scale(ProcEvtsScale);
  h_Kminus_DIF_xy->Scale(ProcEvtsScale);
  h_Kminus_DIF_zr->Scale(ProcEvtsScale);
  
  h_piplus_DIF_r->Scale(ProcEvtsScale);
  h_piplus_DIF_z->Scale(ProcEvtsScale);
  h_piplus_DIF_xy->Scale(ProcEvtsScale);
  h_piplus_DIF_zr->Scale(ProcEvtsScale);
  
  h_Kplus_DIF_r->Scale(ProcEvtsScale);
  h_Kplus_DIF_z->Scale(ProcEvtsScale);
  h_Kplus_DIF_xy->Scale(ProcEvtsScale);
  h_Kplus_DIF_zr->Scale(ProcEvtsScale);
  
  /******************************************************************************************************************************/


  SumFluxesFlavours();

  //h_numu->Scale(ProcEvtsScale);
  //h_anumu->Scale(ProcEvtsScale);
  //h_nue->Scale(ProcEvtsScale);
  //h_anue->Scale(ProcEvtsScale);

  // ------------------- SPL
  G4double BL = 130.;
  G4String fnam="";
  if(primaryGen->GetJOBID()>=0){
    fnam = Form("nufl_%06d_GLOBES_%3.0fKm.txt",primaryGen->GetJOBID(),BL);
  }else{
    fnam = Form("nufl_-%06d_GLOBES_%3.0fKm.txt",-primaryGen->GetJOBID(),BL);
  }
  PrepareGLoBESFlux(fnam,BL);
  //-------------------- SLANIC
  BL = 1544.;
  if(primaryGen->GetJOBID()>=0){
    fnam = Form("nufl_%06d_GLOBES_%4.0fKm.txt",primaryGen->GetJOBID(),BL);
  }else{
    fnam = Form("nufl_-%06d_GLOBES_%4.0fKm.txt",-primaryGen->GetJOBID(),BL);
  }
  PrepareGLoBESFlux(fnam,BL);
  //-------------------- GENERIC 100Km
  BL = 100.;
  if(primaryGen->GetJOBID()>=0){
    fnam = Form("nufl_%06d_GLOBES_%3.0fKm.txt",primaryGen->GetJOBID(),BL);
  }else{
    fnam = Form("nufl_-%06d_GLOBES_%3.0fKm.txt",-primaryGen->GetJOBID(),BL);
  }
  PrepareGLoBESFlux(fnam,BL);
 //---------------------


  FluxesStats();
  
  bool WriteHistogramsToFile = true;
  
  if (WriteHistogramsToFile) {
    //m_hh->finalize();
    
    fROOT->cd();
    
    h_ETarg->Write();
    h_LTarg->Write();
    
    h_p_muplus_PI->Write();
    h_p_muminus_PI->Write();
    h_p_muplus_K->Write();
    h_p_muminus_K->Write();
    // neutrino fluxes 
    
    // unweighted
    pions_numu_du_pi_NW->Write();
    pions_anumu_du_pi_NW->Write();
    kaons_numu_du_ka_NW->Write();
    kaons_anumu_du_ka_NW->Write();

    //weighted
    pions_numu_du_pi_IDEAL->Write();

    pions_numu_du_pi->Write();
    pions_anumu_du_pi->Write();

    pions_numu_du_pi_CLONE->Write();
    pions_anumu_du_pi_CLONE->Write();
    
    pions_numu_du_mu->Write();
    pions_anumu_du_mu->Write();
    pions_nue_du_mu->Write();
    pions_anue_du_mu->Write();
    
    kaons_numu_du_ka->Write();
    kaons_anumu_du_ka->Write();
    
    kaons_numu_du_pi->Write();
    kaons_anumu_du_pi->Write();
    
    kaons_nue_du_mu->Write();
    kaons_anumu_du_mu->Write();
    kaons_anue_du_mu->Write();
    kaons_numu_du_mu->Write();
    
    kaons_numu_du_3->Write();
    kaons_anumu_du_3->Write();
    kaons_nue_du_3->Write();
    kaons_anue_du_3->Write();
    
    kzeros_numu_du_pi->Write();
    kzeros_anumu_du_pi->Write();
    
    kzeros_nue_du_mu->Write();
    kzeros_anumu_du_mu->Write();
    kzeros_anue_du_mu->Write();
    kzeros_numu_du_mu->Write();
    
    kzeros_numu_du_3->Write();
    kzeros_anumu_du_3->Write();
    kzeros_nue_du_3->Write();
    kzeros_anue_du_3->Write();

    //

    h_numu->Write();
    h_anumu->Write();
    h_nue->Write();
    h_anue->Write();

    //

    h_piminus_DIF_r->Write();
    h_piminus_DIF_z->Write();
    h_piminus_DIF_xy->Write();
    h_piminus_DIF_zr->Write();
    h_piminus_DIF_thp->Write();
    h_piminus_DIF_thp_EnuW->Write();
    h_piminus_DIF_thpinu->Write();
    h_piminus_DIF_Ethnu->Write();
    h_piminus_DIF_EnuForw->Write();

    h_Kminus_DIF_r->Write();
    h_Kminus_DIF_z->Write();
    h_Kminus_DIF_xy->Write();
    h_Kminus_DIF_zr->Write();
    h_Kminus_DIF_thp->Write();
    h_Kminus_DIF_thp_EnuW->Write();
    h_Kminus_DIF_thpinu->Write();
    h_Kminus_DIF_Ethnu->Write();
    h_Kminus_DIF_EnuForw->Write();

    h_piplus_DIF_r->Write();
    h_piplus_DIF_z->Write();
    h_piplus_DIF_xy->Write();
    h_piplus_DIF_zr->Write();
    h_piplus_DIF_thp->Write();
    h_piplus_DIF_thp_EnuW->Write();
    h_piplus_DIF_thpinu->Write();
    h_piplus_DIF_Ethnu->Write();
    h_piplus_DIF_EnuForw->Write();

    h_Kplus_DIF_r->Write();
    h_Kplus_DIF_z->Write();
    h_Kplus_DIF_xy->Write();
    h_Kplus_DIF_zr->Write();
    h_Kplus_DIF_thp->Write();
    h_Kplus_DIF_thp_EnuW->Write();
    h_Kplus_DIF_thpinu->Write();
    h_Kplus_DIF_Ethnu->Write();
    h_Kplus_DIF_EnuForw->Write();

    //

    h_pt_exit_piplus->Write();
    h_p_exit_piplus->Write();
    h_xy_exit_piplus->Write();
    h_z_exit_piplus->Write();
    h_r_exit_piplus->Write();
    h_pVSr_exit_piplus->Write();
    h_pVStheta_exit_piplus->Write();
    h_thetaVSr_exit_piplus->Write();
    h_theta_exit_piplus->Write();

    h_pt_exit_piminus->Write();
    h_p_exit_piminus->Write();
    h_xy_exit_piminus->Write();
    h_z_exit_piminus->Write();
    h_r_exit_piminus->Write();
    h_pVSr_exit_piminus->Write();
    h_pVStheta_exit_piminus->Write();
    h_thetaVSr_exit_piminus->Write();
    h_theta_exit_piminus->Write();

    h_pt_exit_kplus->Write();
    h_p_exit_kplus->Write();
    h_xy_exit_kplus->Write();
    h_z_exit_kplus->Write();
    h_r_exit_kplus->Write();
    h_pVSr_exit_kplus->Write();
    h_pVStheta_exit_kplus->Write();
    h_thetaVSr_exit_kplus->Write();
    h_theta_exit_kplus->Write();

    h_pt_exit_kminus->Write();
    h_p_exit_kminus->Write();
    h_xy_exit_kminus->Write();
    h_z_exit_kminus->Write();
    h_r_exit_kminus->Write();
    h_pVSr_exit_kminus->Write();
    h_pVStheta_exit_kminus->Write();
    h_thetaVSr_exit_kminus->Write();
    h_theta_exit_kminus->Write();
 
    h_pt_exit_muplus->Write();
    h_p_exit_muplus->Write();
    h_xy_exit_muplus->Write();
    h_z_exit_muplus->Write();
    h_r_exit_muplus->Write();
    h_pVSr_exit_muplus->Write();
    h_pVStheta_exit_muplus->Write();
    h_thetaVSr_exit_muplus->Write();
    h_theta_exit_muplus->Write();

    h_pt_exit_muminus->Write();
    h_p_exit_muminus->Write();
    h_xy_exit_muminus->Write();
    h_z_exit_muminus->Write();
    h_r_exit_muminus->Write();
    h_pVSr_exit_muminus->Write();
    h_pVStheta_exit_muminus->Write();
    h_thetaVSr_exit_muminus->Write();
    h_theta_exit_muminus->Write();

    h_pt_exit_k0L->Write();
    h_p_exit_k0L->Write();
    h_xy_exit_k0L->Write();
    h_z_exit_k0L->Write();
    h_r_exit_k0L->Write();
    h_pVSr_exit_k0L->Write();
    h_pVStheta_exit_k0L->Write();
    h_thetaVSr_exit_k0L->Write();
    h_theta_exit_k0L->Write();

    h_pt_targ_piplus->Write();
    h_p_targ_piplus->Write();
    h_z_targ_piplus->Write();
    h_zabs_targ_piplus->Write();
    h_theta_targ_piplus->Write();
    h_pVStheta_targ_piplus->Write();
    
    for(int i=0;i<NENB;i++){
      h_pVStheta_targ_piplus_Enubins[i]->Write();
      h_p_targ_piplus_Enubins[i]->Write();
      h_theta_targ_piplus_Enubins[i]->Write();
    }

    h_pt_targ_piminus->Write();
    h_p_targ_piminus->Write();
    h_z_targ_piminus->Write();
    h_zabs_targ_piminus->Write();
    h_theta_targ_piminus->Write();
    h_pVStheta_targ_piminus->Write();

    for(int i=0;i<NENB;i++){
      h_pVStheta_targ_piminus_Enubins[i]->Write();
      h_p_targ_piminus_Enubins[i]->Write();
      h_theta_targ_piminus_Enubins[i]->Write();
    }

    // muon decay
    h_MUDEC_probaTunnel->Write();
    h_MUDEC_pathTunnel->Write();

    h_MUDEC_probaTunnel_pmu->Write();
    h_MUDEC_probaTunnel_thmu->Write();
    h_MUDEC_probaTunnel_rmu->Write();

    h_MUDEC_Enumustar->Write();
    h_MUDEC_Enuestar->Write();
    h_MUDEC_Eanumustar->Write();
    h_MUDEC_Eanuestar->Write();

    h_MUDEC_muxy->Write();
    h_MUDEC_muzr->Write();
    
    h_MUDEC_cthstarMu->Write();
    h_MUDEC_cthstarNu->Write();

    h_MUDEC_polaL_muplus->Write();
    h_MUDEC_polaL_muminus->Write();
    h_MUDEC_thpimu_lab->Write();

    h_MUDEC_pmupar->Write();
    h_geom_g4->Write();

    h_decay_flags->Write();
    h_decay_NUM->Write();
    h_decay_BR->Write();
    h_decay_BR_PDG->Write();

    h_prim_match_pi->Write();
    h_prim_match_ka->Write();
    h_prim_match_k0->Write();

    fROOT->Close();    
  }

  //print
  //
  G4cout
     << "\n--------------------End of Run------------------------------\n"
     //<< "\n mean Energy in Target : " << G4BestUnit(sumETarg,"Energy")
     //<< " +- "                          << G4BestUnit(rmsETarg,"Energy")  
     << "\n mean Energy in Target : " << sumETarg
     << " +- "                          << rmsETarg  
     //<< "\n mean Energy in Gap      : " << G4BestUnit(sumEGap,"Energy")
     //<< " +- "                          << G4BestUnit(rmsEGap,"Energy")
     << G4endl;
     
  G4cout
     //<< "\n mean trackLength in Target : " << G4BestUnit(sumLTarg,"Length")
     //<< " +- "                               << G4BestUnit(rmsLTarg,"Length")  
     << "\n mean trackLength in Target : " << sumLTarg
     << " +- "                               << rmsLTarg  
     //<< "\n mean trackLength in Gap      : " << G4BestUnit(sumLGap,"Length")
     //<< " +- "                               << G4BestUnit(rmsLGap,"Length")
     << "\n------------------------------------------------------------\n"
     << G4endl;
}
